# AURORA-X — Project Notes & Live Tracker

> **Task Docs Sync (always-accurate docs)**
>
> - **Update tracker section in `aurora_X.md`:** `make summary`  
> - **Detect paste drift vs MASTER_TASK_LIST:** `make drift`  
> - Pre-commit runs both automatically (`tools/precommit.sh`) so docs never go stale.

Aurora-X Ultra is an offline, zero-API, secure-by-default program synthesis engine with a live HUD/Sidebar/Dashboard tracker.  
This document now contains the **canonical tracker block** and **sync tools** so your docs always match the true state.

---

## TL;DR — What Aurora Does Today
- Spec-DSL → tests (examples + fuzz + post-conditions)  
- AST synthesis (beam); scoring by examples + post; security audit  
- Iterate (mutate/resynthesize); sandboxed `unittest`; call-graph + scores; HTML report  
- Auto-debug scaffold (isolate fails, shrink hints, patch suggestions)  
- Tracker: HUD (floating), Sidebar (sticky), `/dashboard` UI, history snapshots & sparkline, CSV export  
- Offline-first; optional telemetry to Chango via env-gated POST (off by default)

---

## How To Keep This File In Sync
Run:
```bash
make summary   # upserts the canonical tracker block below
make drift     # prints diff if anything diverges from MASTER_TASK_LIST.md
```

---

## Current Scope & Non-Negotiables
- Offline-first (no external APIs by default)  
- Strict security auditing on generated code (AST; forbidden calls/imports)  
- Deterministic runs; isolated subsystems (easy to swap/fix)  
- If a recommendation improves quality/safety, implement it—don't ask

---

<!-- AURORA_TRACKER_BEGIN -->
### ✅ Task Tracker Status (Authoritative, from progress.json)

# 🎯 Aurora-X Task Tracker - MASTER_TASK_LIST

*Generated: 2025-10-06 09:58:19*

## 📊 Project Summary

**Overall Progress:** 🟡 63.9%

## 📈 Phase Progress

| Phase | Name | Status | Progress |
|-------|------|--------|----------|
| T01 | Foundation Core | ✅ completed | 100.0% |
| T02 | Learning & Memory Core | 🚀 in_progress | 91.7% |
| T03 | Adaptive Learning Engine | ⏳ pending | 0.0% |

## 📋 Detailed Breakdown

### ✅ T01: Foundation Core (100.0%)

| Task | Name | Status | Progress | Owner | Priority | Tags |
|------|------|--------|----------|-------|----------|------|
| T01.1 | Core Offline Engine | ✅ completed | 100.0% | - | critical | engine, core |
| T01.2 | Security Layer | ✅ completed | 100.0% | - | high | security |
| T01.3 | Auto Debug System | ✅ completed | 100.0% | - | high | debug, automation |
| T01.4 | CLI & Makefile | ✅ completed | 100.0% | - | medium | cli, build |
| T01.5 | Isolated Architecture | ✅ completed | 100.0% | - | critical | architecture |

### 🚀 T02: Learning & Memory Core (91.7%)

| Task | Name | Status | Progress | Owner | Priority | Tags |
|------|------|--------|----------|-------|----------|------|
| T02.1 | Persistent Corpus | 🚀 in_progress | 91.7% | corpus-team | - | - |

#### 📁 T02.1: Persistent Corpus - Subtasks

| Subtask | Name | Status | Progress | Tags |
|---------|------|--------|----------|------|
| T02.1.1 | Schema & Storage | ✅ completed | 100.0% | database, schema |
| T02.1.2 | Local Corpus Engine | ✅ completed | 100.0% | engine, storage |
| T02.1.3 | Telemetry & Sync | ✅ completed | 100.0% | telemetry, sync |
| T02.1.4 | Baseline Comparison | ✅ completed | 100.0% | comparison, baseline |
| T02.1.5 | Enhanced Reporting | ✅ completed | 100.0% | reporting, visualization |
| T02.1.6 | Persistent Learning Seeds | 🚀 in_progress | 50.0% | learning, seeds |

### ⏳ T03: Adaptive Learning Engine (0.0%)

| Task | Name | Status | Progress | Owner | Priority | Tags |
|------|------|--------|----------|-------|----------|------|
| T03.1 | Adaptive Learning Core | ⏳ pending | 0.0% | ml-team | - | - |

#### 📁 T03.1: Adaptive Learning Core - Subtasks

| Subtask | Name | Status | Progress | Tags |
|---------|------|--------|----------|------|
| T03.1.1 | learn.py Engine | ⏳ pending | 0.0% | learning, engine |
| T03.1.2 | Visualization Layer | ⏳ pending | 0.0% | visualization, ui |
| T03.1.3 | Dynamic Bias Scheduler | ⏳ pending | 0.0% | scheduler, bias |

---

## 🔄 Update Instructions

1. Edit `progress.json` with your updates
2. Run `python tools/update_progress.py` to validate and regenerate this file
3. Check for any validation errors or gating violations
4. Commit both files together

<!-- AURORA_TRACKER_END -->

---

## Usage Recap
```bash
pip install -e .
make run && make open-report

# Serve dashboard
make serve PORT=8000   # http://localhost:8000  (dashboard at /dashboard)

# Docs sync
make summary
make drift
```