name: Aurora-X E2E

on:
  push:
  pull_request:

jobs:
  e2e:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest, macos-14]  # macos-14 = Apple Silicon ARM64
    env:
      HOST: http://127.0.0.1:8000
      PORT: 8000
      AURORA_DEFAULT_LANG: python
    steps:
      - uses: actions/checkout@v4

      # Python with pip cache
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install Aurora-X
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pytest jq pycurl || true

      # Go with module cache
      - uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'
          cache: true

      # Rust with build cache
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: .
          cache-targets: true

      # .NET with NuGet cache
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Launch server (background)
        run: |
          nohup python -m aurora_x.serve >/tmp/aurora.log 2>&1 & echo $! > /tmp/aurora.pid
          echo "PID:" $(cat /tmp/aurora.pid)
          for i in $(seq 1 30); do
            curl -fsS ${HOST}/healthz && break || sleep 1
          done
          curl -fsS ${HOST}/healthz | jq .

      - name: Hit demo/status endpoints
        run: |
          curl -fsS -X POST -H 'content-type: application/json' -d '{"prompt":"make a futuristic timer ui","lang":"python"}' ${HOST}/chat | jq .
          curl -fsS -X POST -H 'content-type: application/json' -d '{"problem":"(2+3)^2 + 1"}' ${HOST}/api/solve | jq .
          curl -fsS -X POST -H 'content-type: application/json' -d '{"problem":"orbital period a=7000 km M=5.972e24 kg"}' ${HOST}/api/solve/pretty | jq .
          curl -fsS -X POST -H 'content-type: application/json' -d '{"seconds":86400}' ${HOST}/api/format/seconds | jq .
          curl -fsS -X POST -H 'content-type: application/json' -d '{"values":[{"value":7e6,"unit":"m"},{"value":5.972e24,"unit":"kg"}]}' ${HOST}/api/format/units | jq .
          curl -fsS ${HOST}/api/demo/cards | jq '.ok, (.cards|length)'
          curl -fsS -X POST ${HOST}/api/demo/run_all | tee /tmp/run_all.json | jq '{ok,file,count}'

      - name: Assert payloads (hard-fail if missing keys)
        run: |
          python - <<'PY'
          import json,sys,urllib.request
          host = "http://127.0.0.1:8000"
          def post(path, payload):
              req = urllib.request.Request(host+path, data=json.dumps(payload).encode(), headers={'Content-Type':'application/json'})
              return json.load(urllib.request.urlopen(req))
          # Health
          h = json.load(urllib.request.urlopen(host+"/healthz"))
          assert h.get("status")=="ok", h
          # Math
          r = post("/api/solve", {"problem":"(2+3)^2 + 1"})
          assert r.get("ok") and abs(r["value"]-26.0)<1e-9, r
          # Physics pretty
          p = post("/api/solve/pretty", {"problem":"orbital period a=7000 km M=5.972e24 kg"})
          assert p.get("ok") and "period_pretty" in p, p
          print("Assertions OK")
          PY

      # Generate cross-language artifacts via /chat
      - name: Generate Go service (via /chat)
        run: |
          curl -fsS -X POST -H 'content-type: application/json' \
            -d '{"prompt":"fast microservice web api","lang":"go"}' ${HOST}/chat | jq .

      - name: Generate Rust CLI (via /chat)
        run: |
          curl -fsS -X POST -H 'content-type: application/json' \
            -d '{"prompt":"memory-safe cli to parse args","lang":"rust"}' ${HOST}/chat | jq .

      - name: Generate C# Web API (via /chat)
        run: |
          curl -fsS -X POST -H 'content-type: application/json' \
            -d '{"prompt":"enterprise web api with health","lang":"csharp"}' ${HOST}/chat | jq .

      # Build checks for generated code
      - name: Build Go
        run: |
          test -f main.go || (echo "main.go missing" && exit 1)
          GO111MODULE=off go build -v .

      - name: Build Rust
        run: |
          test -f Cargo.toml || (echo "Cargo.toml missing" && exit 1)
          cargo build --release

      - name: Build C# (.NET)
        run: |
          # The router creates 'Aurora.WebApi' folder with a csproj inside
          test -d Aurora.WebApi || (echo "Aurora.WebApi missing" && ls -la && exit 1)
          dotnet restore Aurora.WebApi
          dotnet build Aurora.WebApi -c Release --nologo --verbosity minimal

      - name: Upload logs and demo results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: aurora-artifacts
          path: |
            /tmp/aurora.log
            /tmp/run_all.json
            runs/**/*.json
            runs/**/*.html
            main.go
            go.mod
            Cargo.toml
            src/**/*.rs
            Aurora.WebApi/**/*.cs
            Aurora.WebApi/**/*.csproj

  # Linux ARM64 job using Docker buildx (no special runner needed)
  e2e-linux-arm64:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Set up QEMU for ARM emulation
        uses: docker/setup-qemu-action@v3
        
      - name: Build ARM64 test image
        run: |
          # Create minimal Dockerfile for testing if not exists
          if [ ! -f Dockerfile.e2e ]; then
            cat > Dockerfile.e2e << 'EOF'
FROM --platform=linux/arm64 python:3.11-slim
WORKDIR /app
COPY . .
RUN pip install --no-cache-dir -e . && \
    pip install pytest jq pycurl || true
EXPOSE 8000
CMD ["python", "-m", "aurora_x.serve"]
EOF
          fi
          
          # Build ARM64 image
          docker buildx build --platform linux/arm64 -t aurora-e2e:arm64 -f Dockerfile.e2e --load .
          
      - name: Test ARM64 container
        run: |
          # Run the container in background
          docker run -d --name aurora-arm64 -p 8000:8000 aurora-e2e:arm64
          
          # Wait for server to be ready
          for i in $(seq 1 30); do
            curl -fsS http://localhost:8000/healthz && break || sleep 1
          done
          
          # Test endpoints
          curl -fsS http://localhost:8000/healthz | jq .
          curl -fsS -X POST -H 'content-type: application/json' \
            -d '{"prompt":"hello world","lang":"python"}' \
            http://localhost:8000/chat | jq .
          
          # Cleanup
          docker stop aurora-arm64
          docker rm aurora-arm64