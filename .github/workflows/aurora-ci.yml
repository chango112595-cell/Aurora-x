name: Aurora CI (strict)

on:
  pull_request:
  push:
    branches: [ main ]

permissions:
  contents: write         # needed to push badges branch
  security-events: write  # needed to upload SARIF
  pull-requests: write

jobs:
  ci:
    runs-on: ubuntu-latest
    timeout-minutes: 25

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt || true
          pip install pytest pytest-cov ruff bandit semgrep lxml

      - name: Lint (ruff)
        run: ruff check .

      - name: Security (bandit - high only)
        run: bandit -r aurora_x -lll

      - name: Tests + Coverage XML (>=85%)
        id: testcov
        run: |
          pytest -q --maxfail=1 --disable-warnings \
            --cov=aurora_x --cov-report=term-missing --cov-report=xml:coverage.xml
          python - <<'PY'
          import os
          from lxml import etree
          doc = etree.parse("coverage.xml")
          rate = float(doc.getroot().attrib.get("line-rate", "0"))*100
          print(f"COVERAGE={rate:.2f}")
          with open(os.environ["GITHUB_OUTPUT"],"a") as f:
              f.write(f"coverage={rate:.2f}\n")
          import sys
          sys.exit(0 if rate >= 85.0 else 1)
          PY

      - name: Semgrep (findings + SARIF)
        run: semgrep --config semgrep.yml --sarif --output semgrep.sarif || true

      - name: Upload SARIF to Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif

      # --- Coverage badge publishing (to 'badges' branch) ---
      - name: Generate coverage badge SVG
        run: |
          python - <<'PY'
          import os, math
          cov = float(os.getenv("COVER","0") or "${{ steps.testcov.outputs.coverage }}")
          color = "red" if cov < 60 else "orange" if cov < 80 else "yellow" if cov < 85 else "green"
          svg = f'''<svg xmlns="http://www.w3.org/2000/svg" width="150" height="20">
          <linearGradient id="b" x2="0" y2="100%"><stop offset="0" stop-color="#bbb" stop-opacity=".1"/><stop offset="1" stop-opacity=".1"/></linearGradient>
          <mask id="a"><rect width="150" height="20" rx="3" fill="#fff"/></mask>
          <g mask="url(#a)">
            <rect width="80" height="20" fill="#555"/>
            <rect x="80" width="70" height="20" fill="{color}"/>
            <rect width="150" height="20" fill="url(#b)"/>
          </g>
          <g fill="#fff" text-anchor="middle" font-family="DejaVu Sans,Verdana,Geneva" font-size="11">
            <text x="40" y="14">coverage</text>
            <text x="115" y="14">{cov:.0f}%</text>
          </g>
          </svg>'''
          os.makedirs("badges_out", exist_ok=True)
          with open("badges_out/coverage.svg","w") as f:
              f.write(svg)
          PY

      - name: Publish badge to 'badges' branch
        if: github.ref == 'refs/heads/main'
        run: |
          git config user.name "github-actions"
          git config user.email "actions@users.noreply.github.com"
          git fetch origin badges || true
          git checkout -B badges origin/badges || git checkout -b badges
          mkdir -p badges
          cp badges_out/coverage.svg badges/coverage.svg
          git add badges/coverage.svg
          git commit -m "ci: update coverage badge" || echo "no changes"
          git push origin badges