name: Deploy via SSH

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      deploy_message:
        description: 'Deployment message'
        required: false
        default: 'Manual deployment triggered'

env:
  HEALTH_TIMEOUT: 120
  HEALTH_RETRIES: 30
  HEALTH_INTERVAL: 4

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy to VPS via SSH
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Send Discord notification - Starting
        if: vars.DISCORD_WEBHOOK_URL != ''
        run: |
          curl -X POST -H "Content-Type: application/json" \
            -d "{\"embeds\":[{\"title\":\"üöÄ Aurora-X Deployment Starting\",\"description\":\"Deploying commit: \`${GITHUB_SHA:0:8}\`\\nBranch: \`${{ github.ref_name }}\`\\nTriggered by: \`${{ github.actor }}\`\\nMessage: ${{ github.event.inputs.deploy_message || github.event.head_commit.message }}\",\"color\":3447003,\"timestamp\":\"$(date -u +'%Y-%m-%dT%H:%M:%SZ')\"}]}" \
            "${{ vars.DISCORD_WEBHOOK_URL }}" || true
      
      - name: Create deployment directory on server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT || '22' }}
          script: |
            set -e
            mkdir -p ~/aurora-x-deployment
            mkdir -p ~/aurora-x-deployment/backups
            
            # Backup current stack if exists
            if [ -f ~/aurora-x-deployment/docker-compose.yml ]; then
              cp ~/aurora-x-deployment/docker-compose.yml ~/aurora-x-deployment/backups/docker-compose.yml.$(date +%Y%m%d_%H%M%S)
            fi
      
      - name: Copy deployment files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT || '22' }}
          source: "docker-compose.yml,update-aurora.sh,Dockerfile.app,.env.example"
          target: ~/aurora-x-deployment/
      
      - name: Setup environment and deploy
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT || '22' }}
          command_timeout: 10m
          script: |
            set -e
            cd ~/aurora-x-deployment
            
            # Make scripts executable
            chmod +x update-aurora.sh
            
            # Create .env file if it doesn't exist
            if [ ! -f .env ]; then
              cp .env.example .env
              echo "‚ö†Ô∏è Created .env file from template. Please configure it!"
            fi
            
            # Update environment variables
            if [ -n "${{ secrets.CF_TUNNEL_TOKEN }}" ]; then
              sed -i "s/^CF_TUNNEL_TOKEN=.*/CF_TUNNEL_TOKEN=${{ secrets.CF_TUNNEL_TOKEN }}/" .env
            fi
            
            if [ -n "${{ secrets.AURORA_HEALTH_TOKEN }}" ]; then
              sed -i "s/^AURORA_HEALTH_TOKEN=.*/AURORA_HEALTH_TOKEN=${{ secrets.AURORA_HEALTH_TOKEN }}/" .env
            fi
            
            if [ -n "${{ vars.DISCORD_WEBHOOK_URL }}" ]; then
              sed -i "s|^AURORA_DISCORD_WEBHOOK=.*|AURORA_DISCORD_WEBHOOK=${{ vars.DISCORD_WEBHOOK_URL }}|" .env
            fi
            
            # Set GitHub repository for Docker image
            sed -i "s|^GITHUB_REPOSITORY=.*|GITHUB_REPOSITORY=${{ github.repository }}|" .env
            
            # Stop existing containers
            docker compose down || true
            
            # Build and start new containers
            echo "üî® Building Aurora-X Docker image..."
            docker compose build --pull aurora
            
            echo "üöÄ Starting Aurora-X containers..."
            docker compose up -d
            
            # Wait for container to be ready
            echo "‚è≥ Waiting for Aurora-X to be healthy..."
            sleep 10
      
      - name: Health check
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT || '22' }}
          command_timeout: 3m
          script: |
            set -e
            cd ~/aurora-x-deployment
            
            # Load environment variables
            export $(grep -v '^#' .env | xargs)
            
            HEALTH_TOKEN="${AURORA_HEALTH_TOKEN:-ok}"
            HEALTH_URL="http://localhost:8000/healthz?token=${HEALTH_TOKEN}"
            
            echo "üè• Performing health check..."
            MAX_ATTEMPTS=${{ env.HEALTH_RETRIES }}
            ATTEMPT=0
            
            while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
              ATTEMPT=$((ATTEMPT + 1))
              
              if curl -fsS "$HEALTH_URL" >/dev/null 2>&1; then
                echo "‚úÖ Health check passed! (Attempt ${ATTEMPT}/${MAX_ATTEMPTS})"
                
                # Get container status
                docker compose ps
                
                # Get recent logs
                echo "üìã Recent Aurora logs:"
                docker compose logs --tail=20 aurora
                
                exit 0
              fi
              
              if [ $ATTEMPT -eq 10 ] || [ $ATTEMPT -eq 20 ]; then
                echo "‚è≥ Still waiting... (Attempt ${ATTEMPT}/${MAX_ATTEMPTS})"
              fi
              
              sleep ${{ env.HEALTH_INTERVAL }}
            done
            
            echo "‚ùå Health check failed after ${MAX_ATTEMPTS} attempts!"
            echo "üìã Container logs:"
            docker compose logs aurora
            exit 1
      
      - name: Send Discord notification - Success
        if: success() && vars.DISCORD_WEBHOOK_URL != ''
        run: |
          curl -X POST -H "Content-Type: application/json" \
            -d "{\"embeds\":[{\"title\":\"‚úÖ Aurora-X Deployed Successfully\",\"description\":\"Deployment completed!\\n\\nCommit: \`${GITHUB_SHA:0:8}\`\\nBranch: \`${{ github.ref_name }}\`\\nDeployed by: \`${{ github.actor }}\`\\nURL: ${{ vars.AURORA_URL || 'Not configured' }}\",\"color\":5763719,\"timestamp\":\"$(date -u +'%Y-%m-%dT%H:%M:%SZ')\"}]}" \
            "${{ vars.DISCORD_WEBHOOK_URL }}" || true
      
      - name: Send Discord notification - Failure
        if: failure() && vars.DISCORD_WEBHOOK_URL != ''
        run: |
          curl -X POST -H "Content-Type: application/json" \
            -d "{\"embeds\":[{\"title\":\"‚ùå Aurora-X Deployment Failed\",\"description\":\"Deployment failed!\\n\\nCommit: \`${GITHUB_SHA:0:8}\`\\nBranch: \`${{ github.ref_name }}\`\\nTriggered by: \`${{ github.actor }}\`\\n\\nCheck the [workflow logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.\",\"color\":15158332,\"timestamp\":\"$(date -u +'%Y-%m-%dT%H:%M:%SZ')\"}]}" \
            "${{ vars.DISCORD_WEBHOOK_URL }}" || true