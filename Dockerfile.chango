# Multi-stage build for Chango frontend
# Stage 1: Build the React app
FROM node:20-alpine AS builder

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY tsconfig.json ./
COPY drizzle.config.ts ./

# Install dependencies
RUN npm ci

# Copy source code
COPY client/ ./client/
COPY server/ ./server/
COPY shared/ ./shared/
COPY postcss.config.js ./
COPY tailwind.config.ts ./
COPY vite.config.ts ./
COPY components.json ./

# Build the application
RUN npm run build

# Stage 2: Production server
FROM node:20-alpine

WORKDIR /app

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# Copy package files
COPY --chown=nodejs:nodejs package*.json ./

# Install production dependencies only
RUN npm ci --omit=dev && \
    npm cache clean --force

# Copy built application from builder stage
COPY --chown=nodejs:nodejs --from=builder /app/dist ./dist

# Copy necessary server files
COPY --chown=nodejs:nodejs server/ ./server/
COPY --chown=nodejs:nodejs shared/ ./shared/
COPY --chown=nodejs:nodejs tsconfig.json ./
COPY --chown=nodejs:nodejs drizzle.config.ts ./

# Create necessary directories for runtime
RUN mkdir -p /app/attached_assets && \
    chown -R nodejs:nodejs /app/attached_assets

# Switch to non-root user
USER nodejs

# Environment variables
ENV NODE_ENV=production \
    PORT=5000 \
    HOST=0.0.0.0

# Expose the application port
EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD node -e "require('http').get('http://localhost:5000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1); }).on('error', () => process.exit(1));"

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["node", "dist/index.js"]