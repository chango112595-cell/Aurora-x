Metadata-Version: 2.4
Name: aurora-x
Version: 1.1.0
Summary: Aurora-X Ultra - Offline Autonomous Code Synthesis Engine + Live Task Tracker
Author: Aurora Team
Keywords: tracker,hud
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: fastapi>=0.118.2
Requires-Dist: flask>=3.0.3
Requires-Dist: flask-cors>=5.0.0
Requires-Dist: httpx>=0.28.1
Requires-Dist: pytest>=8.3.5
Requires-Dist: requests>=2.32.4
Requires-Dist: uvicorn[standard]>=0.33.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0; extra == "dev"
Requires-Dist: black>=22.0; extra == "dev"
Requires-Dist: mypy>=0.950; extra == "dev"

# Aurora-X Ultra

![seed-bias](https://img.shields.io/badge/seed__bias-dynamic-%23007acc?label=seed_bias&style=flat)
![offline](https://img.shields.io/badge/mode-offline--first-green?style=flat)

_Offline Autonomous Code Synthesis Engine_

## Overview
Aurora-X is an autonomous code synthesis engine that uses AST-based mutations, beam search, and corpus-based seeding to synthesize functions from specifications. Aurora is **offline-first** â€” it records to JSONL/SQLite locally and never calls external APIs unless you enable explicit exports.

## Features
- **AST-based synthesis** with beam search and mutations
- **Persistent corpus** in JSONL + SQLite format
- **Seeding system** that learns from past successful snippets
- **Learning seeds** with EMA-based bias updates and drift caps
- **Signature normalization** and TF-IDF fallback matching
- **CLI interface** for corpus queries and synthesis runs
- **Web API** with seed bias tracking endpoint

## Installation
```bash
pip install -e .
```

## Usage
```bash
# Run synthesis with seeding
aurorax --spec-file ./specs/rich_spec.md --outdir runs

# Query corpus for past synthesis attempts
aurorax --dump-corpus "add(a:int,b:int)->int" --top 5

# Quick check of bias without running synthesis
aurorax --show-bias --outdir runs

# Run tests
make test
```

## Learning Seeds

Aurora-X uses persistent learning seeds to improve synthesis performance across runs. The system tracks successful synthesis patterns and adjusts biases using Exponential Moving Average (EMA) with drift caps.

### Configuration
- **Alpha**: EMA smoothing factor (default: 0.2)
- **Drift Cap**: Maximum allowed drift per update (default: Â±0.15)
- **Top N**: Number of top bias terms kept (default: 10)

### Seed Persistence
- Seeds are stored in `.aurora/seeds.json`
- Each function signature gets a unique seed key
- Biases range from -1.0 to 1.0 (negative = poor, positive = good)

### Environment Variables
- `AURORA_SEED`: Set random seed for reproducible runs
- `AURORA_SEEDS_PATH`: Override default seed storage path

### API Endpoints
```bash
# Get seed bias summary and top reasons
curl http://localhost:8080/api/seed_bias
```

Response:
```json
{
  "summary": {
    "total_seeds": 15,
    "avg_bias": 0.1234,
    "max_bias": 0.4567,
    "min_bias": -0.2345,
    "total_updates": 42,
    "config": {
      "alpha": 0.2,
      "drift_cap": 0.15,
      "top_n": 10
    }
  },
  "top_biases": [
    {"seed_key": "abc123", "bias": 0.4567},
    {"seed_key": "def456", "bias": 0.3456}
  ]
}
```

## Seed Bias (Legacy)
- Current run's `seed_bias` is shown in the HTML report header and printed by the CLI when a run ends.
- File path: `runs/run-*/learn_weights.json`.

## Reproducible Runs

To ensure reproducible synthesis runs:

```bash
# Set fixed random seed
export AURORA_SEED=42

# Use specific seed storage
export AURORA_SEEDS_PATH=/path/to/seeds.json

# Run synthesis
aurorax --spec-file ./specs/rich_spec.md --seed $AURORA_SEED
```

## Adaptive Learning Engine

Aurora-X includes an adaptive bias scheduler that combines exploitation and Îµ-greedy exploration to optimize synthesis performance over time.

### Features
- **Îµ-greedy exploration**: Balance between exploration (Îµ=0.15) and exploitation
- **Decay mechanism**: Per-iteration decay (0.98) for bias values
- **Cooldown periods**: Prevents immediate reuse of same bias (5 iterations)
- **Top-K tracking**: Maintains top 10 most significant biases
- **Visual sparklines**: Track bias evolution over time

### API Endpoints
```bash
# Get adaptive scheduler statistics
curl http://localhost:8080/api/adaptive_stats

# Get seed bias history
curl http://localhost:8080/api/seed_bias/history
```

## Project Status

### Phase Completion (T01â€“T07)
| Phase | Status | Description |
|-------|--------|-------------|
| **T01** | âœ… Complete | Foundation Core - AST synthesis engine |
| **T02** | âœ… Complete | Learning & Memory - Corpus recording |
| **T03** | âœ… Complete | Adaptive Engine - Îµ-greedy exploration |
| **T04** | âœ… Complete | Production Hardening - CI/CD, Discord |
| **T05** | âœ… Complete | Spec DSL v3 - Multi-function specs |
| **T06** | âœ… Complete | Dashboard v2 - FastAPI with WebSocket |
| **T07** | âœ… Complete | Orchestrator - Autonomous monitoring |

### Original Milestones
- âœ… **Milestone 1**: Core synthesis engine complete
- âœ… **Milestone 2**: Corpus recording and seeding implemented
- âœ… **Milestone 3**: Persistent learning seeds with EMA updates
- âœ… **Milestone 4**: Adaptive learning engine with Îµ-greedy exploration
- ðŸ”œ **Next**: T08 Telemetry/Chango integration (deferred)

## ðŸš€ Autonomous Mode (T07) â€” Orchestrator

Aurora's orchestrator watches `/specs/*.md`, synthesizes code on changes/new specs, runs tests, updates the dashboard, and (optionally) pushes to GitHub and pings Discord.

### Quick Start
```bash
make orchestrator          # foreground loop
make orchestrate-bg        # daemon (logs: /tmp/aurora_orch.log)
make serve-v3 && make open-dashboard   # start UI and print URL
```

### Config (env / Replit Secrets)

| Var | Default | Notes |
|-----|---------|-------|
| `AURORA_ORCH_INTERVAL` | `300` | Poll interval (seconds) |
| `AURORA_GIT_AUTO` | `0` | Set `1` to enable auto-commit/push |
| `AURORA_GIT_URL` | â€” | e.g. `https://github.com/user/repo.git` |
| `AURORA_GIT_BRANCH` | `main` | Target branch |
| `DISCORD_WEBHOOK_URL` | â€” | Enables status alerts |

### Triggers
- New/changed spec in `/specs` (SHA256 change detection)
- First-run when no prior row exists in `runs/spec_runs.jsonl`

### Outputs
- `runs/run-YYYYMMDD-HHMMSS/{src,tests,report.html}`
- Dashboard row persisted in `runs/spec_runs.jsonl`
- Optional Git push (`aurora: spec run for <spec>`) + Discord embed

### One-tap v3 Spec Flow
```bash
make spec3-all SPEC3=specs/check_palindrome.md
```
