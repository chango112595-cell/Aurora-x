#!/usr/bin/env python3
"""
Flask App Synthesis from Natural Language
Directly generates Flask application code from parsed metadata
"""

from pathlib import Path

from aurora_x.spec.parser_nl import parse_english
from aurora_x.templates.flask_app import generate_flask_app


def create_flask_app_from_text(text: str, run_dir: Path) -> Path:
    """
    Generate a Flask application directly from natural language text.

    Args:
        text: Natural language description of the Flask app
        run_dir: Directory to save the generated code

    Returns:
        Path to the generated Flask app file
    """
    # Parse the natural language request
    parsed = parse_english(text)

    # Check if this is a Flask request
    if parsed.get("framework") != "flask":
        raise ValueError("Not a Flask application request")

    # Generate the Flask application code
    flask_code = generate_flask_app(parsed)

    # Ensure the run directory exists
    run_dir = Path(run_dir)
    src_dir = run_dir / "src"
    src_dir.mkdir(parents=True, exist_ok=True)

    # Write the Flask app to a file
    app_name = parsed.get("name", "flask_app").replace("_app", "")
    app_file = src_dir / f"{app_name}_app.py"
    app_file.write_text(flask_code, encoding="utf-8")

    # Create a simple test file for the Flask app
    test_dir = run_dir / "tests"
    test_dir.mkdir(parents=True, exist_ok=True)

    test_code = f'''"""
Test suite for {app_name} Flask application
Generated by Aurora-X
"""

import unittest
import sys
from pathlib import Path
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

# Import the Flask app
from {app_name}_app import create_app

class TestFlaskApp(unittest.TestCase):
    def setUp(self):
        """Set up test client"""
        self.app = create_app()
        self.app.config['TESTING'] = True
        self.client = self.app.test_client()

    def test_app_exists(self):
        """Test that the app exists"""
        self.assertIsNotNone(self.app)

    def test_health_endpoint(self):
        """Test the health check endpoint"""
        response = self.client.get('/api/health')
        self.assertEqual(response.status_code, 200)
        data = response.get_json()
        self.assertIn('status', data)
        self.assertEqual(data['status'], 'healthy')

    def test_home_route(self):
        """Test the home route returns successfully"""
        response = self.client.get('/')
        self.assertEqual(response.status_code, 200)
        # Check that HTML is returned
        self.assertIn(b'<!DOCTYPE html>', response.data)

if __name__ == '__main__':
    unittest.main()
'''

    test_file = test_dir / f"test_{app_name}_app.py"
    test_file.write_text(test_code, encoding="utf-8")

    # Create a simple report
    report_html = f'''<!DOCTYPE html>
<html>
<head>
    <title>Aurora-X Flask App Generation Report</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 20px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; }}
        .container {{ background: rgba(0,0,0,0.8); padding: 30px; border-radius: 10px; }}
        h1 {{ color: #00ffcc; }}
        .success {{ color: #00ff88; }}
        .info {{ color: #00ccff; }}
        pre {{ background: rgba(255,255,255,0.1); padding: 15px; border-radius: 5px; overflow-x: auto; }}
        a {{ color: #00ffcc; }}
    </style>
</head>
<body>
    <div class="container">
        <h1>✨ Aurora-X Flask App Generated</h1>
        <p class="success">✅ Flask application successfully synthesized!</p>
        <div class="info">
            <h2>Generated Files:</h2>
            <ul>
                <li>Application: <code>src/{app_name}_app.py</code></li>
                <li>Tests: <code>tests/test_{app_name}_app.py</code></li>
            </ul>
            <h2>To Run:</h2>
            <pre>cd {run_dir}
python src/{app_name}_app.py</pre>
            <h2>To Test:</h2>
            <pre>cd {run_dir}
python -m unittest tests/test_{app_name}_app.py</pre>
            <p>The app will be available at <a href="http://localhost:5000">http://localhost:5000</a></p>
        </div>
    </div>
</body>
</html>
'''

    report_file = run_dir / "report.html"
    report_file.write_text(report_html, encoding="utf-8")

    print(f"✅ Flask app generated: {app_file}")
    print(f"✅ Tests generated: {test_file}")
    print(f"✅ Report: {report_file}")

    return app_file


if __name__ == "__main__":
    import sys
    if len(sys.argv) > 1:
        text = " ".join(sys.argv[1:])
        from datetime import datetime
        run_name = f"run-{datetime.now().strftime('%Y%m%d-%H%M%S')}"
        run_dir = Path("runs") / run_name
        create_flask_app_from_text(text, run_dir)
    else:
        print("Usage: python spec_from_flask.py <natural language description>")
