🚀 AURORA-X VPS DEPLOYMENT - COPY & PASTE COMMANDS
==================================================

SSH to your Ubuntu VPS and run these commands in order:

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
STEP 1: CREATE ALL FILES (copy entire block)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

mkdir -p ~/aurora-x && cd ~/aurora-x

# Create docker-compose.aurora-x.yml
cat > docker-compose.aurora-x.yml <<'YML'
services:
  aurora:
    # Build Aurora from your GitHub repo
    build:
      context: ./app
      dockerfile: Dockerfile
    container_name: aurora_x
    environment:
      PORT: "8000"
      AURORA_ENV: "prod"
      AURORA_HEALTH_TOKEN: "${AURORA_HEALTH_TOKEN:-ok}"
      AURORA_DISCORD_WEBHOOK: "${AURORA_DISCORD_WEBHOOK:-}"
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8000/health?token=${AURORA_HEALTH_TOKEN:-ok}"]
      interval: 15s
      timeout: 5s
      retries: 20
    restart: unless-stopped

  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: aurora_cf
    depends_on:
      aurora:
        condition: service_healthy
    command: tunnel run
    environment:
      TUNNEL_TOKEN: "${CF_TUNNEL_TOKEN}"
    restart: unless-stopped
YML

# Create setup script
cat > setup-aurora-x.sh <<'SH'
#!/usr/bin/env bash
set -euo pipefail

# ----- install docker & compose (Ubuntu) -----
if ! command -v docker >/dev/null 2>&1; then
  sudo apt-get update -y
  sudo apt-get install -y ca-certificates curl gnupg
  sudo install -m 0755 -d /etc/apt/keyrings
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
  echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] \
https://download.docker.com/linux/ubuntu $(. /etc/os-release; echo $VERSION_CODENAME) stable" \
  | sudo tee /etc/apt/sources.list.d/docker.list >/dev/null
  sudo apt-get update -y
  sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
fi

# ----- clone your repo (if not present) -----
mkdir -p ~/aurora-x && cd ~/aurora-x
if [ ! -d app/.git ]; then
  rm -rf app
  git clone https://github.com/chango112595-cell/Aurora-x app
fi

# ----- build & start -----
docker compose -f docker-compose.aurora-x.yml build
docker compose -f docker-compose.aurora-x.yml up -d

echo
echo "Aurora-X is starting behind Cloudflare..."
echo "Check health:  docker compose -f docker-compose.aurora-x.yml logs -f aurora"
echo "CF tunnel:     docker compose -f docker-compose.aurora-x.yml logs -f cloudflared"
SH

chmod +x setup-aurora-x.sh

# Create .env file
cat > .env <<'ENV'
# Paste your Cloudflare Tunnel token (Zero Trust → Networks → Tunnels → Create → Token)
CF_TUNNEL_TOKEN=PASTE_TUNNEL_TOKEN_HERE

# Health endpoint guard (append ?token=ok by default)
AURORA_HEALTH_TOKEN=ok

# Optional: Discord webhook for deploy/synthesis notifications
AURORA_DISCORD_WEBHOOK=
ENV

echo "✅ Files created in ~/aurora-x"

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
STEP 2: GET CLOUDFLARE TUNNEL TOKEN
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

1. Go to: https://one.dash.cloudflare.com/
2. Navigate to: Zero Trust → Networks → Tunnels
3. Click "Create a tunnel"
4. Choose "Cloudflared"
5. Name it: aurora-x
6. Save tunnel
7. Copy the token (long string starting with ey...)

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
STEP 3: ADD TOKEN TO .env
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

nano ~/aurora-x/.env
# Replace PASTE_TUNNEL_TOKEN_HERE with your actual token
# Save and exit (Ctrl+X, Y, Enter)

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
STEP 4: DEPLOY AURORA
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

cd ~/aurora-x
./setup-aurora-x.sh

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
STEP 5: CONFIGURE PUBLIC HOSTNAME IN CLOUDFLARE
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Back in Cloudflare:
1. Go to your tunnel → Public Hostnames tab
2. Click "Add a public hostname"
3. Configure:
   - Subdomain: aurora (or leave blank for root)
   - Domain: yourdomain.com
   - Service: http://aurora:8000
4. Save hostname

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
VERIFY DEPLOYMENT
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# Check local health
curl http://localhost:8000/health?token=ok

# Check public access (wait 30 seconds for DNS)
curl https://aurora.yourdomain.com/health?token=ok

# View logs
docker compose -f ~/aurora-x/docker-compose.aurora-x.yml logs -f

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
MANAGEMENT COMMANDS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# Update Aurora (pull latest code)
cd ~/aurora-x
git -C app pull
docker compose -f docker-compose.aurora-x.yml build
docker compose -f docker-compose.aurora-x.yml up -d

# View logs
docker compose -f ~/aurora-x/docker-compose.aurora-x.yml logs -f aurora
docker compose -f ~/aurora-x/docker-compose.aurora-x.yml logs -f cloudflared

# Stop services
docker compose -f ~/aurora-x/docker-compose.aurora-x.yml down

# Restart services
docker compose -f ~/aurora-x/docker-compose.aurora-x.yml restart

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ACCESS POINTS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Once deployed:
• Health: https://aurora.yourdomain.com/health?token=ok
• Dashboard: https://aurora.yourdomain.com/dashboard
• Chat: https://aurora.yourdomain.com/chat
• Main: https://aurora.yourdomain.com

Mobile PWA:
• iOS: Safari → Share → Add to Home Screen
• Android: Chrome → Menu → Install App