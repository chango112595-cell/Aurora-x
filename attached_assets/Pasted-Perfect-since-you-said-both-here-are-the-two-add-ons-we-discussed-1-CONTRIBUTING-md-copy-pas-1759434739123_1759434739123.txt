Perfect—since you said both, here are the two add-ons we discussed:

⸻

1) CONTRIBUTING.md (copy–paste)

# Contributing to AURORA-X Ultra

Thanks for helping build the most advanced offline coding engine.  
This repo follows **isolation-first** modules, deterministic tests, and safe-by-default policies.

## Ground Rules
- **Zero network by default.** Any outbound telemetry is opt-in via env flags.
- **Isolation:** changes must not couple modules across `aurora_x/*` boundaries.
- **Determinism:** tests must pass with fixed seeds (`SEED=1337`).
- **Security:** never bypass the AST auditor / sandbox.

## Workflow
1. Fork & branch from `main`:
   - feature: `feat/<area>-<short-name>`
   - fix: `fix/<area>-<ticket>`
2. Install tooling:
   ```bash
   pip install -e .[dev] || pip install -e .
   pip install pre-commit
   make precommit-install

	3.	Run checks locally:

make fmt && make lint && make test


	4.	Push and open a PR. CI must be green.

Commit Style (Conventional Commits)
	•	feat(synth): add ternary-if exploration
	•	fix(sandbox): harden timeout on SIGKILL
	•	docs(readme): add quickstart
	•	chore(ci): bump actions/setup-python

PR Checklist
	•	Unit tests added/updated
	•	make lint and make test pass locally
	•	Security auditor unchanged or strengthened
	•	No network calls unless guarded by env flags
	•	Docs/README updated when behavior changes

Code Layout
	•	aurora_x/core – spec/DSL parsing (pure)
	•	aurora_x/synth – candidate generation/beam search (pure)
	•	aurora_x/eval – example runner + post-conditions (pure)
	•	aurora_x/sandbox – subprocess unittest runner
	•	aurora_x/corpus – JSONL/SQLite corpus I/O + retrieval
	•	aurora_x/learn – bounded weights persistence
	•	aurora_x/report – HTML emitter
	•	aurora_x/exporter.py – offline telemetry queue
	•	aurora_x/main.py – orchestration/CLI only

---

# 2) Switch to `ruff.toml` (keeps the same rules, easier to tweak)

> You can **keep `setup.cfg`** for pytest/coverage and move ruff config into `ruff.toml`.

**Add** `ruff.toml` at repo root:

```toml
# ruff.toml
line-length = 100
target-version = "py310"

[lint]
select = ["E","F","W","I","UP","B"]
ignore = ["E203","E501"]

[format]
quote-style = "preserve"
indent-style = "space"

Update .pre-commit-config.yaml works unchanged (ruff auto-detects ruff.toml).

Keep this in setup.cfg (unchanged) for pytest/coverage sections only.

⸻

Optional niceties (recommended)

.editorconfig (consistent editors)

# .editorconfig
root = true

[*]
charset = utf-8
end_of_line = lf
insert_final_newline = true
indent_style = space
indent_size = 4
trim_trailing_whitespace = true

[*.md]
trim_trailing_whitespace = false

Add a CI status badge to README (optional)

Right under the title, add:

[![CI](https://github.com/<your-org>/<your-repo>/actions/workflows/ci.yml/badge.svg)](../../actions/workflows/ci.yml)


⸻

What you need to do (one-time)
	1.	Drop these new files into the repo:

	•	CONTRIBUTING.md
	•	ruff.toml
	•	(optional) .editorconfig

	2.	Nothing else to change—CI already works with ci.yml, and pre-commit will pick up ruff.toml.

Want me to also add a tiny CODE_OF_CONDUCT.md and a PR template to complete the “open-source grade” setup?