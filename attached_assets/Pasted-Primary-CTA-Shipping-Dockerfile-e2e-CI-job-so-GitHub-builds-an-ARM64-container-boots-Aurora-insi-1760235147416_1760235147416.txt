Primary CTA: Shipping Dockerfile.e2e + CI job so GitHub builds an ARM64 container, boots Aurora inside it, and hits /healthz + key APIs automatically.
Secondary CTA: Or you can also Hire an Expert for the multi-arch CI rollout.

Add these files (repo root):
Dockerfile.e2e

# Multi-arch friendly (works on linux/arm64 and amd64)
FROM python:3.11-slim
ENV PYTHONDONTWRITEBYTECODE=1 PYTHONUNBUFFERED=1 PORT=8000 AURORA_DEFAULT_LANG=python
WORKDIR /app
# system deps for building wheels + curl, jq
RUN apt-get update && apt-get install -y --no-install-recommends build-essential curl jq && rm -rf /var/lib/apt/lists/*
COPY . /app
RUN pip install --upgrade pip && pip install -e . && pip install pytest
EXPOSE 8000
CMD sh -c "python -m aurora_x.serve & \
  for i in $(seq 1 30); do curl -fsS http://127.0.0.1:${PORT}/healthz && break || sleep 1; done && \
  curl -fsS -X POST -H 'content-type: application/json' -d '{\"problem\":\"(2+3)^2 + 1\"}' http://127.0.0.1:${PORT}/api/solve && \
  tail -f /dev/null"

Extend CI with an ARM64 container test (append to .github/workflows/aurora-e2e.yml):

e2e-linux-arm64:
  runs-on: ubuntu-latest
  steps:
    - uses: actions/checkout@v4
    - uses: docker/setup-qemu-action@v3
    - uses: docker/setup-buildx-action@v3
    - name: Build image (linux/arm64)
      run: docker buildx build --platform linux/arm64 -f Dockerfile.e2e -t aurora-e2e:arm64 --load .
    - name: Run container and probe APIs
      run: |
        docker run -d --name aurora-arm -p 8000:8000 aurora-e2e:arm64
        # Wait for health
        for i in $(seq 1 30); do curl -fsS http://127.0.0.1:8000/healthz && break || sleep 1; done
        # Quick hits
        curl -fsS -X POST -H 'content-type: application/json' \
          -d '{"prompt":"make a futuristic timer ui","lang":"python"}' http://127.0.0.1:8000/chat | jq .
        curl -fsS -X POST -H 'content-type: application/json' \
          -d '{"problem":"orbital period a=7000 km M=5.972e24 kg"}' http://127.0.0.1:8000/api/solve/pretty | jq .
        # artifacts
        docker cp aurora-arm:/app/runs ./runs || true
    - name: Upload ARM artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: arm64-artifacts
        path: runs/**

Run locally (any arch):

docker build -f Dockerfile.e2e -t aurora-e2e:local .
docker run -it --rm -p 8000:8000 aurora-e2e:local
# open http://localhost:8000/healthz  and  /dashboard/demos

One quick thing: should I also generate a minimal Dockerfile.app (slimmer, production) plus a multi-arch push step so you can publish ghcr.io/<you>/aurora-x:latest for phones/browsers to hit remotely?