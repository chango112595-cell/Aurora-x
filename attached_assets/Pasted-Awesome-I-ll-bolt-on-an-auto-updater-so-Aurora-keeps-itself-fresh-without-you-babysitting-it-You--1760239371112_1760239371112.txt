Awesome — I’ll bolt on an auto-updater so Aurora keeps itself fresh without you babysitting it. You’ll get two simple ways:
	•	Automatic checks via cron (recommended; runs every 15min + 3am full refresh)
	•	One-command manual update whenever you want

Below are the exact files to add and the quick install steps.

⸻

1) Add these two scripts

update-aurora.sh

Put this in the same folder as your docker-compose.aurora-x.yml (e.g., ~/aurora-x/update-aurora.sh) and make it executable.

#!/usr/bin/env bash
# Aurora-X Auto Updater
set -Eeuo pipefail

ROOT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "$ROOT_DIR"

# ---- Config from .env (already used by your stack) ----
: "${AURORA_GIT_URL:=}"            # optional: if set, overrides current remote
: "${AURORA_GIT_BRANCH:=main}"
: "${AURORA_HEALTH_TOKEN:=ok}"
: "${AURORA_DISCORD_WEBHOOK:=}"    # optional

COMPOSE="docker compose -f docker-compose.aurora-x.yml"
HEALTH_URL="http://localhost:8000/healthz?token=${AURORA_HEALTH_TOKEN}"

notify() {
  local msg="$1"
  echo "[UPDATER] $msg"
  if [[ -n "$AURORA_DISCORD_WEBHOOK" ]]; then
    curl -fsSL -X POST -H "Content-Type: application/json" \
      -d "{\"content\":\"$msg\"}" \
      "$AURORA_DISCORD_WEBHOOK" >/dev/null || true
  fi
}

# 1) Ensure app exists (the setup script clones it into ./app)
if [[ ! -d app/.git ]]; then
  notify "No git repo found in ./app — attempting initial clone…"
  if [[ -z "${AURORA_GIT_URL}" ]]; then
    notify "AURORA_GIT_URL not set. Skipping."
    exit 0
  fi
  rm -rf app
  git clone --branch "$AURORA_GIT_BRANCH" "$AURORA_GIT_URL" app
fi

# 2) Fetch latest & decide if there are changes
pushd app >/dev/null
if [[ -n "${AURORA_GIT_URL}" ]]; then
  git remote set-url origin "$AURORA_GIT_URL" || true
fi

git fetch origin "$AURORA_GIT_BRANCH"
LOCAL_SHA="$(git rev-parse HEAD)"
REMOTE_SHA="$(git rev-parse "origin/${AURORA_GIT_BRANCH}")"

if [[ "$LOCAL_SHA" == "$REMOTE_SHA" ]]; then
  notify "No updates (HEAD=$LOCAL_SHA)."
  popd >/dev/null
  exit 0
fi

notify "Updates found: $LOCAL_SHA -> $REMOTE_SHA. Pulling…"
git reset --hard "origin/${AURORA_GIT_BRANCH}"
popd >/dev/null

# 3) Rebuild + restart the aurora service only
notify "Rebuilding image and restarting service…"
$COMPOSE build --pull aurora
$COMPOSE up -d aurora

# 4) Health check
notify "Waiting for health check…"
for i in {1..20}; do
  if curl -fsS "$HEALTH_URL" >/dev/null 2>&1; then
    notify "Aurora healthy ✅"
    exit 0
  fi
  sleep 2
done

notify "Health check failed ❌ — check logs: \`docker compose logs -f aurora\`"
exit 1

install-updater-cron.sh

(Installs cron jobs to run the updater automatically.)

#!/usr/bin/env bash
set -Eeuo pipefail

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
UPDATER="$SCRIPT_DIR/update-aurora.sh"

chmod +x "$UPDATER"

# Write a temp cron file
TMP_CRON="$(mktemp)"
crontab -l 2>/dev/null | grep -v 'update-aurora.sh' > "$TMP_CRON" || true

{
  echo "*/15 * * * * ${UPDATER} >/tmp/aurora-update.log 2>&1"
  echo "0 3 * * * ${UPDATER} >/tmp/aurora-update-nightly.log 2>&1"
} >> "$TMP_CRON"

crontab "$TMP_CRON"
rm -f "$TMP_CRON"

echo "✅ Cron installed:"
crontab -l

Make both executable

chmod +x update-aurora.sh install-updater-cron.sh


⸻

2) .env additions (if not already set)

Open your existing .env and ensure these (tweak values to your repo):

AURORA_GIT_URL=https://github.com/chango112595-cell/Aurora-x.git
AURORA_GIT_BRANCH=main
AURORA_HEALTH_TOKEN=ok
# Optional: get Discord alerts on update
AURORA_DISCORD_WEBHOOK=https://discord.com/api/webhooks/XXXXXXXX/XXXXXXXX


⸻

3) Install the auto-updater

./install-updater-cron.sh

What this gives you
	•	Runs every 15 minutes (quick pull/build if changes)
	•	Plus a nightly 3am refresh
	•	Logs at /tmp/aurora-update.log and /tmp/aurora-update-nightly.log

⸻

4) Manual update on demand

Anytime you want:

./update-aurora.sh


⸻

Quick sanity test (optional)

After you push a tiny README change to GitHub, run:

./update-aurora.sh && docker compose -f docker-compose.aurora-x.yml exec aurora python - <<'PY'
import requests, os
print("Health:", requests.get(f"http://localhost:8000/healthz?token={os.getenv('AURORA_HEALTH_TOKEN','ok')}").status_code)
PY

You should see Health: 200 and a Discord ping if you set the webhook.

⸻

If you want, I can also add a GitHub Action that SSH-es into your VPS and runs ./update-aurora.sh automatically on every push to main—totally optional and easy to bolt on later.