from __future__ import annotations
SAFE_HEADER = "# Generated by Aurora-X v3 (offline, safe)\n"

def impl_for(signature: str, description: str) -> str:
    sig = signature.strip()
    d = (description or "").lower()
    if "palindrome" in d:
        return SAFE_HEADER + sig + ":{\n    \"\"\"Return True if s is a palindrome (unicode-safe).\"\"\"\n    s_norm = s\n    return s_norm == s_norm[::-1]\n"
    if "fibonacci" in d or "fib" in d:
        return SAFE_HEADER + sig + ":{\n    \"\"\"Return n-th Fibonacci number using iterative O(n).\"\"\"\n    if n < 0: raise ValueError(\"n must be non-negative\")\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n"
    return SAFE_HEADER + sig + ":{\n    \"\"\"Template not recognized.\"\"\"\n    raise NotImplementedError(\"No v3 template matched\")\n"
