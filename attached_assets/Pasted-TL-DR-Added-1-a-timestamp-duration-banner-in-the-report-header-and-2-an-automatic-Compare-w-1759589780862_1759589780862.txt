TL;DR: Added (1) a timestamp + duration banner in the report header, and (2) an automatic “Compare with latest” graph diff (graph_diff.html) showing added/removed edges vs runs/latest.

Plan
	•	Track start_ts/end_ts → compute duration; store in run_meta.json.
	•	Enhance write_html_report to render timestamp+duration.
	•	Generate graph_diff.json + graph_diff.html when a “latest” run exists and differs.
	•	Add quick links in the report header.

# =========================================
# PATCH: aurora_x/main.py
# =========================================
# 1) At file top (utils), add:
from datetime import datetime

def iso_now() -> str:
    return datetime.fromtimestamp(time.time()).strftime("%Y-%m-%dT%H:%M:%S")

def fmt_duration(seconds: float) -> str:
    seconds = int(max(0, round(seconds)))
    m, s = divmod(seconds, 60)
    h, m = divmod(m, 60)
    return f"{h}h {m}m {s}s" if h else (f"{m}m {s}s" if m else f"{s}s")

# 2) In AuroraX.__init__ (keep existing args), append:
self._start_time = time.time()

# 3) In AuroraX.run(), just before return (both PASS and INCOMPLETE paths),
#    capture end time and write run_meta.json. Also keep latest symlink update logic.

# --- In PASS branch, BEFORE 'write_html_report(self.repo, spec); return ...'
self._end_time = time.time()
meta = {
    "start_ts": iso_now(),
    "end_ts": iso_now(),
    "duration_seconds": round(self._end_time - self._start_time, 3)
}
write_file(self.repo.path("run_meta.json"), json.dumps(meta, indent=2))
# Update 'latest' symlink and proceed (existing code)

# --- In INCOMPLETE branch, BEFORE final write_html_report():
self._end_time = time.time()
meta = {
    "start_ts": iso_now(),
    "end_ts": iso_now(),
    "duration_seconds": round(self._end_time - self._start_time, 3)
}
write_file(self.repo.path("run_meta.json"), json.dumps(meta, indent=2))

# 4) Add a small helper to compute graph diffs (put near extract_call_graph):
def diff_graphs(old: Dict[str, list], new: Dict[str, list]) -> Dict[str, Any]:
    old_edges = {(u, v) for u, vs in old.items() for v in vs}
    new_edges = {(u, v) for u, vs in new.items() for v in vs}
    added = sorted(list(new_edges - old_edges))
    removed = sorted(list(old_edges - new_edges))
    return {"added": added, "removed": removed, "old_edges": len(old_edges), "new_edges": len(new_edges)}

# 5) Replace write_html_report(...) with the version below (adds banner + diff):
def write_html_report(repo: Repo, spec: Spec) -> None:
    md = read_file(repo.path("AURORA_REPORT.md"))
    cfg = json.loads(read_file(repo.path("run_config.json")))
    graph_p = repo.path("call_graph.json")
    graph = json.loads(read_file(graph_p)) if graph_p.exists() else {"nodes":[f.name for f in spec.functions],"edges":{}}
    edges = graph.get("edges", {})

    # weights + bias
    weights_path = repo.path("learn_weights.json")
    try:
        weights = json.loads(read_file(weights_path)) if weights_path.exists() else {}
    except Exception:
        weights = {}
    seed_bias = float(weights.get("seed_bias", 0.0))

    # run meta
    meta_p = repo.path("run_meta.json")
    duration_s, start_ts = None, None
    if meta_p.exists():
        try:
            meta = json.loads(read_file(meta_p))
            duration_s = meta.get("duration_seconds")
            start_ts = meta.get("start_ts")
        except Exception:
            pass

    # latest symlink status
    latest_link = repo.root.parent / "latest"
    try:
        is_latest = latest_link.exists() and latest_link.resolve() == repo.root.resolve()
    except Exception:
        is_latest = False

    # compare with latest (if current is NOT latest)
    compare_html = ""
    if not is_latest and latest_link.exists():
        try:
            latest_graph_p = latest_link / "call_graph.json"
            if latest_graph_p.exists():
                latest_graph = json.loads(read_file(latest_graph_p))
                latest_edges = latest_graph.get("edges", {})
                dg = diff_graphs(latest_edges, edges)
                # Save JSON + quick HTML diff
                write_file(repo.path("graph_diff.json"), json.dumps(dg, indent=2))
                diff_rows = []
                if dg["added"]:
                    diff_rows.append("<h4>Added edges</h4><ul>" + "".join(f"<li>{u} → {v}</li>" for u, v in dg["added"]) + "</ul>")
                if dg["removed"]:
                    diff_rows.append("<h4>Removed edges</h4><ul>" + "".join(f"<li>{u} → {v}</li>" for u, v in dg["removed"]) + "</ul>")
                if not diff_rows:
                    diff_rows.append("<p>No edge changes.</p>")
                diff_body = f"""<!doctype html><html><head><meta charset="utf-8"><title>Call Graph Diff</title>
<style>body{{font-family:system-ui;margin:24px}}</style></head><body>
<h2>Graph diff vs latest</h2>
<p>Old edges: {dg['old_edges']}, New edges: {dg['new_edges']}</p>
{''.join(diff_rows)}
</body></html>"""
                write_file(repo.path("graph_diff.html"), diff_body)
                compare_html = f'<a href="{repo.path("graph_diff.html")}">Compare with latest (diff)</a>'
        except Exception:
            compare_html = ""

    latest_badge = (
        '<span style="display:inline-block;padding:4px 8px;border-radius:6px;background:#16a34a;color:#fff;font-weight:600;">LATEST RUN ✓</span>'
        if is_latest else
        f'<span style="display:inline-block;padding:4px 8px;border-radius:6px;background:#f59e0b;color:#111;font-weight:600;">NOT LATEST</span> '
        f'<a href="{latest_link}/report.html" style="margin-left:8px;">Open Latest Report →</a>'
    )

    # quick links
    corpus_jsonl = repo.root / "corpus.jsonl"
    corpus_db = repo.root / "corpus.db"
    links = []
    if corpus_jsonl.exists(): links.append(f'<a href="{corpus_jsonl}">corpus.jsonl</a>')
    if corpus_db.exists(): links.append(f'<a href="{corpus_db}">corpus.db</a>')
    links.append(f'<a href="{weights_path}">learn_weights.json</a>')
    if compare_html: links.append(compare_html)
    links_html = " | ".join(links)

    # banner timestamp + duration
    ts_html = f"<span>Started: {start_ts}</span>" if start_ts else ""
    dur_html = f"<span style='margin-left:12px;'>Duration: {fmt_duration(duration_s)}</span>" if duration_s is not None else ""

    body = f"""<!doctype html><html><head><meta charset="utf-8"><title>AURORA-X Report</title>
<style>
  body{{font-family:system-ui,Segoe UI,Roboto,sans-serif;margin:24px}}
  pre,code{{background:#f6f8fa;padding:12px;overflow:auto}}
  .hdr{{display:flex;align-items:center;gap:12px;margin-bottom:8px}}
  .sub{{color:#555;margin:0 0 6px 0}}
  .meta{{color:#333;margin:0 0 16px 0}}
</style>
</head><body>
<div class="hdr">
  <h1 style="margin:0;">AURORA-X Ultra</h1>
  {latest_badge}
</div>
<p class="sub"><b>Run:</b> {repo.root}</p>
<p class="meta">{ts_html}{dur_html}</p>

<h3>Learning</h3>
<pre>{json.dumps({{"seed_bias": round(seed_bias, 4), "weights_file": str(weights_path)}}, indent=2)}</pre>

<h3>Quick Links</h3>
<p>{links_html}</p>

<h3>Config</h3>
<pre>{json.dumps(cfg, indent=2)}</pre>

<h3>Call Graph</h3>
<pre>{json.dumps(graph, indent=2)}</pre>

<h3>Report</h3>
<pre>{md}</pre>

</body></html>"""
    write_file(repo.path("report.html"), body)

How to use

pip install -e .
aurorax --spec-file ./specs/rich_spec.md --outdir runs
# Open the newest HTML:
open runs/latest/report.html            # shows LATEST RUN ✓ + timestamp + duration
# Open an older run:
open runs/run-YYYYMMDD-HHMMSS/report.html  # shows NOT LATEST + Compare with latest (diff)

a. Want the diff to also include function-level pass/total deltas (from logs/scores.jsonl) for a quick regression summary?
b. Want a make compare-latest RUN=<path> target that regenerates graph_diff.html between any two runs?