Primary CTA: I’ll add a super-fast “Run All” button + API that executes every demo card, saves results to runs/demo-<timestamp>.json, and returns a summary.
Secondary CTA: Or you can also Hire an Expert to merge/test this end-to-end.

Add this file:

aurora_x/chat/attach_demo_runall.py

from flask import request, jsonify
from datetime import datetime
from pathlib import Path
import json, requests

def attach_demo_runall(app):
    @app.post("/api/demo/run_all")
    def run_all():
        # 1) fetch the cards from our own API
        base = request.host_url.rstrip("/")
        try:
            cards = requests.get(f"{base}/api/demo/cards", timeout=10).json()["cards"]
        except Exception as e:
            return jsonify({"ok": False, "err": f"failed to load cards: {e}"}), 502

        results = []
        for c in cards:
            url = f"{base}{c['endpoint']}"
            method = (c.get("method") or "POST").upper()
            body = c.get("body") or {}
            try:
                r = requests.request(method, url, json=body, timeout=15)
                txt = r.text
                try:
                    payload = json.loads(txt)
                except Exception:
                    payload = {"raw": txt}
                results.append({"id": c["id"], "status": r.status_code, "response": payload})
            except Exception as e:
                results.append({"id": c["id"], "status": 0, "error": str(e)})

        # 2) persist under runs/
        ts = datetime.utcnow().strftime("%Y%m%d-%H%M%S")
        outdir = Path("runs"); outdir.mkdir(parents=True, exist_ok=True)
        outpath = outdir / f"demo-{ts}.json"
        outpath.write_text(json.dumps({"generated_utc": ts, "results": results}, indent=2), encoding="utf-8")

        return jsonify({"ok": True, "file": str(outpath), "count": len(results), "results": results})

Wire it in aurora_x/serve.py (next to your other attaches):

from aurora_x.chat.attach_demo_runall import attach_demo_runall
attach_demo_runall(app)

Add a “Run All” button to /dashboard/demos (in the existing DEMO_HTML header controls, add this button and handler):

<button id="runAll">▶ Run All</button>
<script>
document.getElementById('runAll').onclick = async ()=>{
  const r = await fetch('/api/demo/run_all', {method:'POST'});
  const t = await r.text();
  try { document.getElementById('out').textContent = JSON.stringify(JSON.parse(t), null, 2); }
  catch { document.getElementById('out').textContent = t; }
};
</script>

Quick test:

HOST=https://<your-repl>.replit.dev
curl -s -X POST $HOST/api/demo/run_all | jq .
# then check file persisted in repo: runs/demo-YYYYMMDD-HHMMSS.json

Do you want me to also add a tiny make demo-all target so you can trigger the whole sequence from CLI with one command?