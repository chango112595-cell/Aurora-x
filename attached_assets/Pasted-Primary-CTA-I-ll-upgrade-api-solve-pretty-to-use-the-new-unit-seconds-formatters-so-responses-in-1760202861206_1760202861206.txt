Primary CTA: I’ll upgrade /api/solve/pretty to use the new unit + seconds formatters so responses include both raw SI and human-friendly strings automatically.
Secondary CTA: Or you can also Hire an Expert to merge/test this in your repo.

Drop-in patch for aurora_x/chat/attach_pretty.py:

from flask import request, jsonify
from aurora_x.generators.solver import solve_text
from aurora_x.chat.attach_format import _fmt_seconds
from aurora_x.chat.attach_units_format import _si_fmt  # reuse SI prettifier

def attach_pretty(app):
    @app.post("/api/solve/pretty")
    def api_solve_pretty():
        data = request.get_json(silent=True) or {}
        text = (data.get("problem") or data.get("prompt") or "").strip()
        if not text:
            return jsonify({"ok": False, "err": "missing 'problem' or 'prompt'"}), 400

        res = solve_text(text)
        if not res.get("ok"):
            return jsonify(res), 422

        pretty = None
        extras = {}

        if res.get("kind") == "physics.orbital_period":
            sec = float(res["period_s"])
            pretty = f"Orbital period: {_fmt_seconds(sec)}"
            # include SI + friendly fields
            if "a_m" in res or "M_kg" in res:
                a_si = res.get("a_m")
                M_si = res.get("M_kg")
                if a_si is not None: extras["a_pretty"] = _si_fmt(float(a_si), "m")
                if M_si is not None: extras["M_pretty"] = _si_fmt(float(M_si), "kg")
            extras["period_pretty"] = _fmt_seconds(sec)

        elif res.get("kind") == "physics.em_superposition":
            x, y, z = res["result"]
            pretty = f"Field vector sum: ({x:.3f}, {y:.3f}, {z:.3f})"

        elif res.get("kind") == "math.evaluate":
            pretty = f"Value = {res['value']:.12g}"

        elif res.get("kind") == "math.differentiate":
            pretty = f"d/dx → {res['derivative']}"

        return jsonify({"ok": True, "pretty": pretty, "result": res, **extras})

Quick check:

HOST=https://<your-repl>.replit.dev
curl -s -X POST -H 'content-type: application/json' \
-d '{"problem":"orbital period a=7000 km M=5.972e24 kg"}' \
$HOST/api/solve/pretty | jq .

You’ll see period_pretty, a_pretty, and M_pretty alongside raw SI values.

Question: want me to add a tiny /api/demo/cards endpoint that returns a few ready-made demo payloads (math + physics) for your dashboard to render as clickable test cards?