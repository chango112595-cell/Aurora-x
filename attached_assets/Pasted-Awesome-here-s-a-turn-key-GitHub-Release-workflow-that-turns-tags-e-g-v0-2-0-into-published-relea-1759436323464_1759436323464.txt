Awesome—here’s a turn-key GitHub Release workflow that turns tags (e.g. v0.2.0) into published releases by pulling the matching section from CHANGELOG.md.

⸻

1) Script to extract the release notes

Create scripts/changelog_to_release.py:

#!/usr/bin/env python3
"""
Extract the section for a given version from CHANGELOG.md.

Usage:
  scripts/changelog_to_release.py v0.2.0 > notes.md
"""
from __future__ import annotations
import re, sys
from pathlib import Path

def main(tag: str) -> int:
    ver = tag.lstrip("v")  # accept 'v0.2.0' or '0.2.0'
    text = Path("CHANGELOG.md").read_text(encoding="utf-8")

    # Find "## [0.2.0] — YYYY-MM-DD" and capture until the next '---' delimiter or next "## ["
    # We keep the content but strip the header line itself; GitHub will show the version/title.
    pat = re.compile(
        rf"^## \[{re.escape(ver)}\][^\n]*\n(.*?)(?:\n---\n|^## \[|\Z)",
        re.M | re.S,
    )
    m = pat.search(text)
    if not m:
        sys.stderr.write(f"Section for {ver} not found in CHANGELOG.md\n")
        return 2
    body = m.group(1).strip()
    print(body)
    return 0

if __name__ == "__main__":
    if len(sys.argv) != 2:
        sys.stderr.write("usage: scripts/changelog_to_release.py <tag>\n")
        sys.exit(2)
    sys.exit(main(sys.argv[1]))

Make it executable:

chmod +x scripts/changelog_to_release.py


⸻

2) GitHub Actions workflow for releases

Create .github/workflows/release.yml:

name: release

on:
  push:
    tags:
      - "v*.*.*"   # e.g., v0.2.0

permissions:
  contents: write   # needed to create a Release with GITHUB_TOKEN

jobs:
  gh-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Generate release notes from CHANGELOG
        id: notes
        shell: bash
        run: |
          TAG="${GITHUB_REF_NAME}"
          python scripts/changelog_to_release.py "${TAG}" > RELEASE_NOTES.md || {
            echo "Falling back to generic notes"
            echo "Release ${TAG}" > RELEASE_NOTES.md
          }
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          cat RELEASE_NOTES.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          body: ${{ steps.notes.outputs.notes }}
          draft: false
          prerelease: false

How it works:
	•	Triggers when you push a tag like v0.2.0 (our Makefile’s release-* already creates tags).
	•	Extracts the matching section from CHANGELOG.md using the script.
	•	Publishes a Release with those notes via the built-in GITHUB_TOKEN (no secrets).

⸻

3) (Optional) Add a one-liner to CONTRIBUTING

Append to the Release section:

After `make release-*`, push the tag to trigger GitHub Release:
```bash
make push-tags
# The release workflow will publish notes from CHANGELOG.md for that tag.

---

That’s it—**tag → automated GitHub Release with clean notes**.  
Want me to also attach build artifacts (e.g., the HTML report ZIP from the latest run) to each release? We can add a step to upload files if they exist.