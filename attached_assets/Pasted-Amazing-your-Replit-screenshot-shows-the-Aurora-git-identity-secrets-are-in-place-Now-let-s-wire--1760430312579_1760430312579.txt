Amazing—your Replit screenshot shows the Aurora git identity secrets are in place ✅.
Now let’s wire GPG-signed commits end-to-end on Replit and bring the Factory Bridge online so the dashboard card stops throwing 502.

I’m giving you copy-paste steps. Do them in order.

⸻

1) Export your GPG private key from Windows (once)

You already uploaded the public key to GitHub (great). For Replit to sign commits, it needs the private key in memory at boot.

In Windows PowerShell (the machine where you created the key), run:

# List keys – copy the long KEYID you want (the one you just created)
gpg --list-secret-keys --keyid-format=long

# Export your private key to a file on Desktop (replace KEYID)
gpg --armor --export-secret-keys KEYID > "$env:USERPROFILE\Desktop\aurora_gpg_private.asc"

Open the file in Notepad and copy all its contents (starts with -----BEGIN PGP PRIVATE KEY BLOCK-----).

⚠️ Handle with care. Don’t share it anywhere except your own Replit Secret.

⸻

2) Add Replit Secrets

In your Replit project → Tools → Secrets, add these (some you already set; just confirm):

Key	Value
AURORA_SIGN	true
AURORA_GIT_NAME	chango112595-cell
AURORA_GIT_EMAIL	chango112595@gmail.com
AURORA_GIT_URL	https://<YOUR_GH_PAT>@github.com/chango112595-cell/Aurora-x.git
AURORA_GIT_BRANCH	main
AURORA_GIT_AUTO	1
AURORA_GPG_PRIVATE	paste the full private key block you exported
AURORA_GPG_PASSPHRASE	(only if your key has a passphrase; otherwise leave unset)
DISCORD_WEBHOOK_URL	(optional)

If you don’t have a repo PAT yet, create a classic token with repo scope and paste in the URL above.

⸻

3) Create the GPG import + git signing bootstrap (on Replit)

In Replit Shell:

mkdir -p scripts
cat > scripts/aurora_boot.sh <<'EOF'
set -euo pipefail

# 1) Import GPG private key from secret
mkdir -p ~/.gnupg
chmod 700 ~/.gnupg

if [ -n "${AURORA_GPG_PRIVATE:-}" ]; then
  printf "%s\n" "$AURORA_GPG_PRIVATE" | gpg --batch --yes --import
  # Trust the key ultimately (non-interactive)
  KEYID="$(gpg --list-secret-keys --with-colons | awk -F: '/^fpr:/ {print $10; exit}')"
  printf 'trust\n5\ny\nsave\n' | gpg --batch --yes --command-fd 0 --edit-key "$KEYID" >/dev/null 2>&1 || true
  # If key has passphrase, configure GPG agent to allow loopback
  if [ -n "${AURORA_GPG_PASSPHRASE:-}" ]; then
    echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf || true
    gpgconf --kill gpg-agent || true
  fi
fi

# 2) Git identity + signing
git config --global user.name  "${AURORA_GIT_NAME:-aurora}"
git config --global user.email "${AURORA_GIT_EMAIL:-aurora@example.com}"
git config --global gpg.program gpg
git config --global commit.gpgsign true
# Pick the first secret key as signer if none set explicitly
if [ -z "$(git config --global user.signingkey)" ]; then
  SIGKEY="$(gpg --list-secret-keys --with-colons | awk -F: '/^sec:/ {print $5; exit}')"
  [ -n "$SIGKEY" ] && git config --global user.signingkey "$SIGKEY"
fi

# 3) Make sure the remote is present
if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
  git remote remove origin >/dev/null 2>&1 || true
  if [ -n "${AURORA_GIT_URL:-}" ]; then
    git remote add origin "$AURORA_GIT_URL"
    git fetch origin || true
  fi
fi

echo "[aurora_boot] GPG + git signing ready."
EOF

chmod +x scripts/aurora_boot.sh


⸻

4) Run the bootstrap at startup and start the services

A) Wire the boot script into your Replit startup

Open your .replit file and make sure the run command runs the boot script before launching Aurora:

run = "bash -lc './scripts/aurora_boot.sh && make bridge-up || python -m aurora_x.bridge --port 5001 & make orch-up || python -m aurora_x.orchestrator & python -m aurora_x.serve --port 8000'"

That line:
	•	imports your GPG key + enables git signing
	•	brings up the Factory Bridge on :5001
	•	starts the Orchestrator (auto-commit/push)
	•	starts the API/UI server on :8000

If your project already has make targets, great. If not, the python -m ... fallbacks will run.

Hit the green Run button once to apply it.

⸻

5) Fix the dashboard “502 bridge unavailable”

If the dashboard still shows the red 502, it means the bridge isn’t up yet.

In Shell:

# Manually start the bridge once
python -m aurora_x.bridge --port 5001 &

# Confirm health
curl -s http://localhost:5001/healthz

Expected: {"status":"ok","service":"factory-bridge"}

Refresh /dashboard — the red banner should disappear.

⸻

6) Full NL → Project → Signed Commit → GitHub test

Trigger a generation through the bridge:

curl -s -X POST http://localhost:5001/api/bridge/nl \
  -H "content-type: application/json" \
  -d '{
    "prompt": "Create a futuristic neon-glass todo webapp (HTML/CSS/JS) with keyboard shortcuts and unit tests",
    "repo": "chango112595-cell/Aurora-x",
    "branch": "main",
    "mode": "commit"
  }' | jq

What happens:
	•	Bridge generates a runs/run-* project
	•	Orchestrator detects it and git add/commit -S/push (signed)
	•	You’ll see a Verified badge on GitHub for the new commit/PR

Check logs:

docker logs -f bridge 2>/dev/null || tail -f /tmp/aurora_orch.log

(If not using Docker, just watch the Replit console output.)

⸻

7) Quick “it worked” checks
	•	GitHub → repo → latest commit has Verified badge
	•	Replit console shows lines like:
gpg: signing succeeded and Pushed to origin main
	•	/dashboard “Factory Bridge” widget no longer 502s and returns JSON

⸻

Notes on safety
	•	Keeping a GPG private key in a Replit Secret is acceptable for development, but for production I recommend a dedicated key with a distinct identity and revocation cert saved offline.
	•	If your private key has a passphrase, the script already enables loopback pinentry so GPG can use AURORA_GPG_PASSPHRASE non-interactively.

⸻

If anything hiccups

Paste only the error lines you see in Replit’s console (no secrets), and I’ll adjust the boot command or the service launcher to match your exact layout.