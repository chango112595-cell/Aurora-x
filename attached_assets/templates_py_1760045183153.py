
from __future__ import annotations
def generate_impl(signature: str, description: str) -> str:
    desc = (description or "").lower()
    if "sum" in desc or "add" in desc:
        return _template_add(signature)
    if "subtract" in desc or "difference" in desc:
        return _template_sub(signature)
    if "reverse" in desc and "string" in desc:
        return _template_reverse(signature)
    return _template_stub(signature)

def _template_add(sig: str) -> str:
    args = sig[sig.find("(")+1:sig.find(")")]
    params = [p.split(":")[0].strip() for p in args.split(",") if p.strip()]
    a,b = (params + ["a","b"])[:2]
    return f"# Generated by Aurora-X (offline)\n{sig}:\n    return {a} + {b}\n"

def _template_sub(sig: str) -> str:
    args = sig[sig.find("(")+1:sig.find(")")]
    params = [p.split(":")[0].strip() for p in args.split(",") if p.strip()]
    a,b = (params + ["a","b"])[:2]
    return f"# Generated by Aurora-X (offline)\n{sig}:\n    return {a} - {b}\n"

def _template_reverse(sig: str) -> str:
    args = sig[sig.find("(")+1:sig.find(")")]
    params = [p.split(":")[0].strip() for p in args.split(",") if p.strip()]
    s = (params + ["s"])[0]
    return f"# Generated by Aurora-X (offline)\n{sig}:\n    return {s}[::-1]\n"

def _template_stub(sig: str) -> str:
    return f"# Generated by Aurora-X (offline)\n{sig}:\n    raise NotImplementedError('No template matched')\n"
