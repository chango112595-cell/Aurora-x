Perfect — here’s a production-grade, push-to-deploy setup with all the options you asked for:
	•	✅ Auto-update via cron (you already added)
	•	✅ GitHub Actions → SSH zero-downtime deploy to your VPS
	•	✅ GitHub Actions → GHCR (container registry) build & push, server pulls new image
	•	✅ One-click manual deploy, auto deploy on push, and rollback
	•	✅ Discord pings on success/fail (optional)

Below are the exact files/snippets to paste.

⸻

0) Server prep (run once on your VPS)

# Docker + Compose plugin (if not installed)
curl -fsSL https://get.docker.com | sh
sudo usermod -aG docker $USER

# Folders
mkdir -p ~/aurora-x && cd ~/aurora-x
# Place these existing files here if not already:
#   docker-compose.aurora-x.yml
#   .env
#   update-aurora.sh
#   install-updater-cron.sh
chmod +x update-aurora.sh install-updater-cron.sh

# (Optional) install cron updater
./install-updater-cron.sh

Keep your stack files in ~/aurora-x. The GitHub Actions below will deploy into this directory.

⸻

1) GitHub Action: SSH Deploy (zero-downtime)

Create: .github/workflows/deploy-ssh.yml

name: Deploy (SSH → Docker Compose)

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      reason:
        description: Why are you deploying?
        required: false
        default: "manual deploy"

env:
  AURORA_DIR: ${{ secrets.AURORA_DIR }} # e.g. /home/ubuntu/aurora-x

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Copy stack files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          source: |
            docker-compose.aurora-x.yml
            .env
          target: ${{ env.AURORA_DIR }}

      - name: Run remote update + rolling restart
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          script: |
            set -e
            cd "$AURORA_DIR"
            # Safety backup of compose file (for rollback)
            cp docker-compose.aurora-x.yml "docker-compose.aurora-x.yml.bak.$(date +%s)"
            # Rebuild/pull & restart only the app service
            docker compose -f docker-compose.aurora-x.yml build --pull aurora
            docker compose -f docker-compose.aurora-x.yml up -d aurora
            # Health check gate (same token as your .env)
            set +e
            for i in {1..20}; do
              curl -fsS "http://localhost:8000/healthz?token=${AURORA_HEALTH_TOKEN:-ok}" && ok=1 && break
              sleep 2
            done
            [[ "$ok" = "1" ]] || (echo "Health check failed" && exit 1)
            echo "Aurora healthy ✅"

      - name: Discord notify (optional)
        if: always()
        run: |
          if [ -n "${{ secrets.DISCORD_WEBHOOK }}" ]; then
            STATUS="${{ job.status }}"
            curl -fsSL -H "Content-Type: application/json" \
              -d "{\"content\":\"**Deploy (SSH)** → ${STATUS}\nRepo: $GITHUB_REPOSITORY\nCommit: $GITHUB_SHA\nBy: $GITHUB_ACTOR\"}" \
              "${{ secrets.DISCORD_WEBHOOK }}" >/dev/null || true
          fi

Required GitHub Secrets
	•	VPS_HOST (e.g. 1.2.3.4)
	•	VPS_USER (e.g. ubuntu)
	•	VPS_SSH_KEY (private key contents)
	•	AURORA_DIR (e.g. /home/ubuntu/aurora-x)
	•	VPS_PORT (optional, default 22)
	•	DISCORD_WEBHOOK (optional)

⸻

2) GitHub Action: Build to GHCR (container registry) + Server Pull

This option builds your image in CI, pushes to GHCR, then tells the server to pull & restart.

Create: .github/workflows/deploy-ghcr.yml

name: Deploy (GHCR → Pull & Restart)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  IMAGE: ghcr.io/${{ github.repository_owner }}/aurora-x:latest
  AURORA_DIR: ${{ secrets.AURORA_DIR }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ env.IMAGE }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Restart on server using new image
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          script: |
            set -e
            cd "$AURORA_DIR"
            docker pull "${{ env.IMAGE }}"
            # Ensure compose uses the GHCR image (compose file should reference it)
            docker compose -f docker-compose.aurora-x.yml up -d aurora
            # Health gate
            set +e
            for i in {1..20}; do
              curl -fsS "http://localhost:8000/healthz?token=${AURORA_HEALTH_TOKEN:-ok}" && ok=1 && break
              sleep 2
            done
            [[ "$ok" = "1" ]] || (echo "Health check failed" && exit 1)
            echo "Aurora healthy ✅"

Compose change (for GHCR route)

In docker-compose.aurora-x.yml, set the aurora service image to GHCR:

services:
  aurora:
    image: ghcr.io/OWNER/aurora-x:latest
    # OR build: .   ← keep only one (image OR build)
    # ... rest of your service config ...

(Replace OWNER with chango112595-cell.)

⸻

3) Rollback workflow (SSH)

If a deploy fails or you want to revert, this rolls back to the previous image (or restarts with the previous compose).

Create: .github/workflows/rollback.yml

name: Rollback Aurora

on:
  workflow_dispatch:
    inputs:
      reason:
        description: Why rollback?
        required: false
        default: "manual rollback"

jobs:
  rollback:
    runs-on: ubuntu-latest
    steps:
      - name: SSH rollback
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          script: |
            set -e
            cd "${{ secrets.AURORA_DIR }}"
            # Try previous image if available
            PREV=$(docker images --format '{{.Repository}}:{{.Tag}} {{.CreatedAt}}' | grep aurora-x | sort -rk2 | sed -n '2p' | awk '{print $1}')
            if [ -n "$PREV" ]; then
              echo "Rolling back to $PREV"
              docker pull "$PREV" || true
              docker compose -f docker-compose.aurora-x.yml up -d aurora
            else
              echo "No previous image found; restarting with last compose backup if present"
              ls -1tr docker-compose.aurora-x.yml.bak.* | tail -1 | xargs -I{} cp {} docker-compose.aurora-x.yml || true
              docker compose -f docker-compose.aurora-x.yml up -d aurora
            fi
            # Health gate
            set +e
            for i in {1..20}; do
              curl -fsS "http://localhost:8000/healthz?token=${AURORA_HEALTH_TOKEN:-ok}" && ok=1 && break
              sleep 2
            done
            [[ "$ok" = "1" ]] || (echo "Rollback health check failed" && exit 1)
            echo "Rollback successful ✅"


⸻

Which option should you use?
	•	Fastest to adopt now: SSH Deploy (deploy-ssh.yml). It uses your server’s existing compose stack and rebuilds on the box.
	•	Cleanest long-term: GHCR Deploy (deploy-ghcr.yml). CI builds the image and your server only pulls & restarts — lighter, reproducible, great for multiple servers.

You can keep both; just run whichever workflow you prefer.

⸻

Quick checklist
	1.	Add the three workflow files above.
	2.	Set GitHub Secrets:
	•	VPS_HOST, VPS_USER, VPS_SSH_KEY, AURORA_DIR, VPS_PORT (optional)
	•	DISCORD_WEBHOOK (optional)
	3.	If using GHCR route: update compose image: and ensure Dockerfile builds the app.
	4.	On the server: confirm ~/aurora-x has your compose + .env, and docker compose ps shows the stack.
	5.	Click Actions → Deploy (or push to main). Watch for the “Aurora healthy ✅” message.

That’s it — you now have automatic cron updates, push-to-deploy CI, manual deploy, and rollback — all with health-gated restarts and optional Discord alerts.