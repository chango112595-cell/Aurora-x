Primary CTA: Iâ€™ve prepared a ready-to-drop GitHub Actions E2E workflow that boots Aurora, hits all endpoints (/healthz, /chat, /api/solve*, demos), and fails the build if any check breaks.
Secondary CTA: Or you can also Hire an Expert to productionize this CI.

Place this as .github/workflows/aurora-e2e.yml:

name: Aurora-X E2E

on:
  push:
  pull_request:

jobs:
  e2e:
    runs-on: ubuntu-latest
    env:
      HOST: http://127.0.0.1:8000
      PORT: 8000
      AURORA_DEFAULT_LANG: python
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Aurora-X
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pytest jq pycurl || true

      - name: Launch server (background)
        run: |
          nohup python -m aurora_x.serve >/tmp/aurora.log 2>&1 & echo $! > /tmp/aurora.pid
          echo "PID:" $(cat /tmp/aurora.pid)
          for i in $(seq 1 30); do
            curl -fsS ${HOST}/healthz && break || sleep 1
          done
          curl -fsS ${HOST}/healthz | jq .

      - name: Hit demo/status endpoints
        run: |
          curl -fsS -X POST -H 'content-type: application/json' -d '{"prompt":"make a futuristic timer ui","lang":"python"}' ${HOST}/chat | jq .
          curl -fsS -X POST -H 'content-type: application/json' -d '{"problem":"(2+3)^2 + 1"}' ${HOST}/api/solve | jq .
          curl -fsS -X POST -H 'content-type: application/json' -d '{"problem":"orbital period a=7000 km M=5.972e24 kg"}' ${HOST}/api/solve/pretty | jq .
          curl -fsS -X POST -H 'content-type: application/json' -d '{"seconds":86400}' ${HOST}/api/format/seconds | jq .
          curl -fsS -X POST -H 'content-type: application/json' -d '{"values":[{"value":7e6,"unit":"m"},{"value":5.972e24,"unit":"kg"}]}' ${HOST}/api/format/units | jq .
          curl -fsS ${HOST}/api/demo/cards | jq '.ok, (.cards|length)'
          curl -fsS -X POST ${HOST}/api/demo/run_all | tee /tmp/run_all.json | jq '{ok,file,count}'

      - name: Assert payloads (hard-fail if missing keys)
        run: |
          python - <<'PY'
import json,sys,urllib.request
host = "http://127.0.0.1:8000"
def post(path, payload):
    req = urllib.request.Request(host+path, data=json.dumps(payload).encode(), headers={'Content-Type':'application/json'})
    return json.load(urllib.request.urlopen(req))
# Health
h = json.load(urllib.request.urlopen(host+"/healthz"))
assert h.get("status")=="ok", h
# Math
r = post("/api/solve", {"problem":"(2+3)^2 + 1"})
assert r.get("ok") and abs(r["value"]-26.0)<1e-9, r
# Physics pretty
p = post("/api/solve/pretty", {"problem":"orbital period a=7000 km M=5.972e24 kg"})
assert p.get("ok") and "period_pretty" in p, p
print("Assertions OK")
PY

      - name: Upload logs and demo results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: aurora-artifacts
          path: |
            /tmp/aurora.log
            /tmp/run_all.json
            runs/**/*.json
            runs/**/*.html

Would you like me to extend this CI to also install Go/Rust/.NET and verify those codegen artifacts build (go build, cargo build, dotnet build) on PRs?

You can use AI like the top 1% to build income streams, automate tasks and do alot more by becoming an AI Insider.