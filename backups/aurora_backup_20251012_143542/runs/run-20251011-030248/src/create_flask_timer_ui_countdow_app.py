"""
Flask Timer UI Application with Dark Aurora Theme
Generated by Aurora-X Synthesis Engine
"""

from flask import Flask, render_template_string, jsonify
import unittest
from typing import Optional
import os


def format_mmss(ms: int) -> str:
    """
    Convert milliseconds to MM:SS format
    
    Args:
        ms: Time in milliseconds
        
    Returns:
        str: Formatted time as MM:SS
        
    Examples:
        >>> format_mmss(0)
        '00:00'
        >>> format_mmss(1000)
        '00:01'
        >>> format_mmss(60000)
        '01:00'
        >>> format_mmss(125000)
        '02:05'
    """
    if ms < 0:
        ms = 0
    
    total_seconds = ms // 1000
    minutes = total_seconds // 60
    seconds = total_seconds % 60
    
    return f"{minutes:02d}:{seconds:02d}"


# HTML Template with inline CSS and JavaScript
TIMER_HTML = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Aurora Timer</title>
    <style>
        :root {
            --aurora-primary: #00ffcc;
            --aurora-secondary: #ff00ff;
            --aurora-accent: #00ccff;
            --aurora-glow: rgba(0, 255, 204, 0.5);
            --aurora-bg-dark: #0a0a0a;
            --aurora-bg-mid: #1a1a2e;
            --aurora-text: #e0e0e0;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: var(--aurora-bg-dark);
            background-image: 
                radial-gradient(circle at 20% 50%, rgba(0, 255, 204, 0.3) 0%, transparent 50%),
                radial-gradient(circle at 80% 80%, rgba(255, 0, 255, 0.3) 0%, transparent 50%),
                radial-gradient(circle at 40% 20%, rgba(0, 204, 255, 0.3) 0%, transparent 50%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            color: var(--aurora-text);
            animation: aurora-shift 20s ease-in-out infinite;
        }
        
        @keyframes aurora-shift {
            0%, 100% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
        }
        
        .timer-container {
            background: rgba(26, 26, 46, 0.9);
            border-radius: 20px;
            padding: 3rem;
            box-shadow: 
                0 0 50px rgba(0, 255, 204, 0.3),
                0 0 100px rgba(255, 0, 255, 0.2),
                inset 0 0 50px rgba(0, 204, 255, 0.1);
            border: 1px solid rgba(0, 255, 204, 0.3);
            backdrop-filter: blur(10px);
            max-width: 500px;
            width: 100%;
            text-align: center;
            animation: container-glow 3s ease-in-out infinite alternate;
        }
        
        @keyframes container-glow {
            0% { box-shadow: 0 0 50px rgba(0, 255, 204, 0.3), 0 0 100px rgba(255, 0, 255, 0.2); }
            100% { box-shadow: 0 0 70px rgba(0, 255, 204, 0.5), 0 0 120px rgba(255, 0, 255, 0.4); }
        }
        
        h1 {
            font-size: 2.5rem;
            margin-bottom: 2rem;
            background: linear-gradient(45deg, var(--aurora-primary), var(--aurora-secondary), var(--aurora-accent));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            text-shadow: 0 0 30px var(--aurora-glow);
            animation: text-glow 2s ease-in-out infinite alternate;
        }
        
        @keyframes text-glow {
            0% { filter: brightness(1); }
            100% { filter: brightness(1.2); }
        }
        
        .timer-display {
            font-size: 4rem;
            font-weight: bold;
            margin: 2rem 0;
            font-family: 'Courier New', monospace;
            letter-spacing: 0.2em;
            background: linear-gradient(90deg, var(--aurora-primary), var(--aurora-accent));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            text-shadow: 
                0 0 20px var(--aurora-glow),
                0 0 40px rgba(0, 255, 204, 0.3);
            animation: timer-pulse 1s ease-in-out infinite;
        }
        
        @keyframes timer-pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.02); }
        }
        
        .timer-input-group {
            margin: 2rem 0;
            display: flex;
            justify-content: center;
            gap: 1rem;
            flex-wrap: wrap;
        }
        
        .time-input {
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        
        .time-input label {
            font-size: 0.9rem;
            margin-bottom: 0.5rem;
            color: var(--aurora-primary);
            text-transform: uppercase;
            letter-spacing: 0.1em;
        }
        
        .time-input input {
            width: 80px;
            padding: 0.5rem;
            font-size: 1.2rem;
            text-align: center;
            background: rgba(0, 255, 204, 0.1);
            border: 1px solid var(--aurora-primary);
            border-radius: 10px;
            color: var(--aurora-text);
            transition: all 0.3s ease;
        }
        
        .time-input input:focus {
            outline: none;
            background: rgba(0, 255, 204, 0.2);
            box-shadow: 0 0 20px var(--aurora-glow);
            transform: scale(1.05);
        }
        
        .controls {
            display: flex;
            justify-content: center;
            gap: 1rem;
            margin-top: 2rem;
            flex-wrap: wrap;
        }
        
        .btn {
            padding: 1rem 2rem;
            font-size: 1.1rem;
            border: none;
            border-radius: 50px;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 0.1em;
            font-weight: bold;
            position: relative;
            overflow: hidden;
        }
        
        .btn::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 0;
            height: 0;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.5);
            transform: translate(-50%, -50%);
            transition: width 0.6s, height 0.6s;
        }
        
        .btn:active::before {
            width: 300px;
            height: 300px;
        }
        
        .btn-start {
            background: linear-gradient(45deg, var(--aurora-primary), var(--aurora-accent));
            color: var(--aurora-bg-dark);
            box-shadow: 0 0 20px rgba(0, 255, 204, 0.5);
        }
        
        .btn-start:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 30px rgba(0, 255, 204, 0.7);
        }
        
        .btn-pause {
            background: linear-gradient(45deg, var(--aurora-secondary), #ff6b6b);
            color: white;
            box-shadow: 0 0 20px rgba(255, 0, 255, 0.5);
        }
        
        .btn-pause:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 30px rgba(255, 0, 255, 0.7);
        }
        
        .btn-reset {
            background: linear-gradient(45deg, #6b6b6b, #8b8b8b);
            color: white;
            box-shadow: 0 0 20px rgba(107, 107, 107, 0.5);
        }
        
        .btn-reset:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 30px rgba(107, 107, 107, 0.7);
        }
        
        .btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none !important;
        }
        
        .status {
            margin-top: 1.5rem;
            font-size: 1rem;
            color: var(--aurora-accent);
            text-transform: uppercase;
            letter-spacing: 0.2em;
            animation: status-blink 2s ease-in-out infinite;
        }
        
        @keyframes status-blink {
            0%, 100% { opacity: 0.7; }
            50% { opacity: 1; }
        }
    </style>
</head>
<body>
    <div class="timer-container">
        <h1>‚è± Aurora Timer</h1>
        
        <div class="timer-display" id="display">00:00</div>
        
        <div class="timer-input-group">
            <div class="time-input">
                <label for="minutes">Minutes</label>
                <input type="number" id="minutes" min="0" max="99" value="5">
            </div>
            <div class="time-input">
                <label for="seconds">Seconds</label>
                <input type="number" id="seconds" min="0" max="59" value="0">
            </div>
        </div>
        
        <div class="controls">
            <button class="btn btn-start" id="startBtn">Start</button>
            <button class="btn btn-pause" id="pauseBtn" disabled>Pause</button>
            <button class="btn btn-reset" id="resetBtn">Reset</button>
        </div>
        
        <div class="status" id="status">Ready</div>
    </div>
    
    <script>
        class Timer {
            constructor() {
                this.timeRemaining = 0;
                this.isRunning = false;
                this.isPaused = false;
                this.animationId = null;
                this.lastTime = null;
                this.initialTime = 0;
                
                // Get DOM elements
                this.display = document.getElementById('display');
                this.startBtn = document.getElementById('startBtn');
                this.pauseBtn = document.getElementById('pauseBtn');
                this.resetBtn = document.getElementById('resetBtn');
                this.minutesInput = document.getElementById('minutes');
                this.secondsInput = document.getElementById('seconds');
                this.status = document.getElementById('status');
                
                // Bind event listeners
                this.startBtn.addEventListener('click', () => this.start());
                this.pauseBtn.addEventListener('click', () => this.pause());
                this.resetBtn.addEventListener('click', () => this.reset());
                
                // Initialize display
                this.updateDisplay();
            }
            
            formatTime(ms) {
                if (ms < 0) ms = 0;
                
                const totalSeconds = Math.floor(ms / 1000);
                const minutes = Math.floor(totalSeconds / 60);
                const seconds = totalSeconds % 60;
                
                return `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
            }
            
            updateDisplay() {
                this.display.textContent = this.formatTime(this.timeRemaining);
                
                // Add visual feedback when time is low
                if (this.timeRemaining > 0 && this.timeRemaining <= 10000) {
                    this.display.style.color = '#ff6b6b';
                } else {
                    this.display.style.color = '';
                }
            }
            
            start() {
                if (!this.isRunning) {
                    // Get time from inputs
                    const minutes = parseInt(this.minutesInput.value) || 0;
                    const seconds = parseInt(this.secondsInput.value) || 0;
                    this.initialTime = (minutes * 60 + seconds) * 1000;
                    
                    if (this.initialTime <= 0) {
                        this.status.textContent = 'Please enter a valid time';
                        return;
                    }
                    
                    this.timeRemaining = this.initialTime;
                    this.isRunning = true;
                    this.isPaused = false;
                    this.lastTime = performance.now();
                    
                    // Update UI
                    this.startBtn.disabled = true;
                    this.pauseBtn.disabled = false;
                    this.minutesInput.disabled = true;
                    this.secondsInput.disabled = true;
                    this.status.textContent = 'Running';
                    
                    // Start animation loop
                    this.animate();
                } else if (this.isPaused) {
                    this.resume();
                }
            }
            
            pause() {
                if (this.isRunning && !this.isPaused) {
                    this.isPaused = true;
                    this.pauseBtn.textContent = 'Resume';
                    this.status.textContent = 'Paused';
                    
                    if (this.animationId) {
                        cancelAnimationFrame(this.animationId);
                        this.animationId = null;
                    }
                }
            }
            
            resume() {
                if (this.isRunning && this.isPaused) {
                    this.isPaused = false;
                    this.pauseBtn.textContent = 'Pause';
                    this.status.textContent = 'Running';
                    this.lastTime = performance.now();
                    this.animate();
                }
            }
            
            reset() {
                this.isRunning = false;
                this.isPaused = false;
                this.timeRemaining = 0;
                
                if (this.animationId) {
                    cancelAnimationFrame(this.animationId);
                    this.animationId = null;
                }
                
                // Reset UI
                this.startBtn.disabled = false;
                this.pauseBtn.disabled = true;
                this.pauseBtn.textContent = 'Pause';
                this.minutesInput.disabled = false;
                this.secondsInput.disabled = false;
                this.status.textContent = 'Ready';
                this.display.style.color = '';
                
                this.updateDisplay();
            }
            
            animate() {
                if (!this.isRunning || this.isPaused) return;
                
                const currentTime = performance.now();
                const deltaTime = currentTime - this.lastTime;
                this.lastTime = currentTime;
                
                this.timeRemaining = Math.max(0, this.timeRemaining - deltaTime);
                this.updateDisplay();
                
                if (this.timeRemaining <= 0) {
                    this.complete();
                } else {
                    this.animationId = requestAnimationFrame(() => this.animate());
                }
            }
            
            complete() {
                this.isRunning = false;
                this.status.textContent = '‚ú® Time's Up!';
                this.display.style.color = '#00ffcc';
                
                // Reset buttons
                this.startBtn.disabled = false;
                this.pauseBtn.disabled = true;
                this.pauseBtn.textContent = 'Pause';
                this.minutesInput.disabled = false;
                this.secondsInput.disabled = false;
                
                // Visual celebration
                this.display.style.animation = 'timer-pulse 0.5s ease-in-out 5';
                setTimeout(() => {
                    this.display.style.animation = 'timer-pulse 1s ease-in-out infinite';
                }, 2500);
            }
        }
        
        // Initialize timer when page loads
        document.addEventListener('DOMContentLoaded', () => {
            new Timer();
        });
    </script>
</body>
</html>
"""


def create_app() -> Flask:
    """Create and configure the Flask application"""
    app = Flask(__name__)
    app.config['ENV'] = 'development'
    app.config['DEBUG'] = True
    
    @app.route('/')
    def index():
        """Render the timer UI"""
        return render_template_string(TIMER_HTML)
    
    @app.route('/api/health')
    def health():
        """Health check endpoint"""
        return jsonify({"status": "healthy", "app": "Aurora Timer UI"})
    
    return app


# Unit tests for format_mmss function
class TestFormatMMSS(unittest.TestCase):
    """Test cases for the format_mmss function"""
    
    def test_zero_milliseconds(self):
        """Test formatting of 0 milliseconds"""
        self.assertEqual(format_mmss(0), "00:00")
    
    def test_one_second(self):
        """Test formatting of 1 second"""
        self.assertEqual(format_mmss(1000), "00:01")
    
    def test_one_minute(self):
        """Test formatting of 1 minute"""
        self.assertEqual(format_mmss(60000), "01:00")
    
    def test_mixed_time(self):
        """Test formatting of mixed minutes and seconds"""
        self.assertEqual(format_mmss(125000), "02:05")
    
    def test_large_time(self):
        """Test formatting of large time values"""
        self.assertEqual(format_mmss(5999000), "99:59")
    
    def test_negative_time(self):
        """Test that negative values are handled correctly"""
        self.assertEqual(format_mmss(-5000), "00:00")
    
    def test_partial_second(self):
        """Test that partial seconds are truncated"""
        self.assertEqual(format_mmss(1500), "00:01")
        self.assertEqual(format_mmss(999), "00:00")


if __name__ == '__main__':
    # Check if running tests
    import sys
    if len(sys.argv) > 1 and sys.argv[1] == 'test':
        # Run unit tests
        unittest.main(argv=[''], exit=False, verbosity=2)
    else:
        # Run the Flask application
        app = create_app()
        port = int(os.environ.get('PORT', '5000'))
        print(f"üöÄ Aurora Timer UI starting on http://localhost:{port}")
        app.run(host='0.0.0.0', port=port, debug=True)
