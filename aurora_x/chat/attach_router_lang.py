"""
Language-aware chat router that auto-selects Python/Go/Rust/C# based on prompt.
Integrates with FastAPI to provide polyglot code generation.
"""

from pathlib import Path

from aurora_x.router.intent_router import classify
from aurora_x.router.lang_select import pick_language
from aurora_x.templates.cli_tool import render_cli
from aurora_x.templates.csharp_webapi import render_csharp_webapi
from aurora_x.templates.go_service import render_go_service
from aurora_x.templates.lib_func import render_func
from aurora_x.templates.rust_cli import render_rust_cli
from aurora_x.templates.web_app_flask import render_app


def attach_router(app):
    """Attach the language-aware chat router to the FastAPI app."""

    @app.post("/chat")
    async def chat(request: dict):
        """
        Process chat requests with automatic language selection.

        Request body:
            prompt: str - The natural language request
            lang: str (optional) - Force a specific language (python/go/rust/csharp)

        Returns:
            JSON with generated code file(s), language selection reason, and run hints
        """
        prompt = (request.get("prompt") or "").strip()
        if not prompt:
            return {"ok": False, "err": "missing prompt"}

        # Classify intent (web_app, cli_tool, lib_func)
        intent = classify(prompt)

        # Auto-select language based on prompt
        lang_choice = pick_language(prompt)

        # Check for explicit language override in request
        explicit_lang = (request.get("lang") or "").strip().lower()
        if explicit_lang in ("python", "go", "rust", "csharp"):
            lang_choice.lang = explicit_lang
            lang_choice.reason = f"explicit override: lang={explicit_lang}"

        # Generate code based on intent and language
        if intent.kind == "web_app":
            return _handle_web_app(intent, lang_choice)
        elif intent.kind == "cli_tool":
            return _handle_cli_tool(intent, lang_choice)
        else:  # lib_func
            return _handle_lib_func(intent, lang_choice)

    return app


def _handle_web_app(intent, lang_choice):
    """Generate web application in the selected language."""

    if lang_choice.lang == "go":
        # Generate Go microservice
        package = render_go_service(intent.name, intent.brief)
        for fname, content in package["files"].items():
            Path(fname).parent.mkdir(parents=True, exist_ok=True)
            Path(fname).write_text(content, encoding="utf-8")

        return {
            "ok": True,
            "kind": "web_app",
            "lang": "go",
            "files": list(package["files"].keys()),
            "reason": lang_choice.reason,
            "hint": package["hint"],
        }

    elif lang_choice.lang == "csharp":
        # Generate C# Web API
        package = render_csharp_webapi(intent.name, intent.brief)
        folder = Path(package.get("folder", "Aurora.WebApi"))
        folder.mkdir(parents=True, exist_ok=True)

        for fname, content in package["files"].items():
            file_path = folder / fname
            file_path.parent.mkdir(parents=True, exist_ok=True)
            file_path.write_text(content, encoding="utf-8")

        return {
            "ok": True,
            "kind": "web_app",
            "lang": "csharp",
            "folder": str(folder),
            "files": list(package["files"].keys()),
            "reason": lang_choice.reason,
            "hint": package["hint"],
        }

    elif lang_choice.lang == "rust":
        # For web apps, Rust falls back to Python (Rust is better for CLIs)
        lang_choice.lang = "python"
        lang_choice.reason = "Rust web frameworks need more setup, using Python Flask"

    # Default to Python Flask
    title = intent.name.replace("_", " ").title() if intent.name else "Aurora App"
    code = render_app(title=title, subtitle=intent.brief or "Generated by Aurora-X")
    Path("app.py").write_text(code, encoding="utf-8")

    return {
        "ok": True,
        "kind": "web_app",
        "lang": "python",
        "file": "app.py",
        "reason": lang_choice.reason,
        "hint": "Run: python app.py (Flask app on port 5000)",
    }


def _handle_cli_tool(intent, lang_choice):
    """Generate CLI tool in the selected language."""

    if lang_choice.lang == "rust":
        # Generate Rust CLI with Cargo project
        package = render_rust_cli(intent.name, intent.brief)

        for fname, content in package["files"].items():
            Path(fname).parent.mkdir(parents=True, exist_ok=True)
            Path(fname).write_text(content, encoding="utf-8")

        return {
            "ok": True,
            "kind": "cli_tool",
            "lang": "rust",
            "files": list(package["files"].keys()),
            "reason": lang_choice.reason,
            "hint": package["hint"],
        }

    elif lang_choice.lang == "go":
        # Generate minimal Go CLI
        go_cli = _generate_go_cli(intent.name, intent.brief)
        Path("cli.go").write_text(go_cli, encoding="utf-8")

        return {
            "ok": True,
            "kind": "cli_tool",
            "lang": "go",
            "file": "cli.go",
            "reason": lang_choice.reason,
            "hint": "Run: go run cli.go [args]",
        }

    # Default to Python (C# CLIs need more boilerplate)
    if lang_choice.lang not in ("python", "go", "rust"):
        lang_choice.reason += " → Python for CLI"

    code = render_cli(intent.name, intent.brief, intent.fields)
    fname = f"{intent.name}.py" if intent.name else "cli_tool.py"
    Path(fname).write_text(code, encoding="utf-8")

    return {
        "ok": True,
        "kind": "cli_tool",
        "lang": "python",
        "file": fname,
        "reason": lang_choice.reason,
        "hint": f"Run: python {fname} --help",
    }


def _handle_lib_func(intent, lang_choice):
    """Generate library function (currently Python only)."""

    # Library functions default to Python for now
    # (Other languages would need more complex test frameworks)
    if lang_choice.lang != "python":
        lang_choice.reason += " → Python for library functions with tests"

    code = render_func(intent.name, intent.brief, intent.fields)
    fname = f"{intent.name}.py" if intent.name else "lib_func.py"
    Path(fname).write_text(code, encoding="utf-8")

    # Create tests directory if needed
    Path("tests").mkdir(exist_ok=True, parents=True)
    test_fname = f"tests/test_{intent.name}.py"

    # For now, create a simple test file
    test_content = f'''"""Tests for {intent.name}"""
import sys
sys.path.insert(0, "..")
from {intent.name} import *

# Run the main function to execute built-in tests
if __name__ == "__main__":
    import subprocess
    subprocess.run([sys.executable, f"../{fname}"])
'''
    Path(test_fname).write_text(test_content, encoding="utf-8")

    return {
        "ok": True,
        "kind": "lib_func",
        "lang": "python",
        "file": fname,
        "tests": test_fname,
        "reason": lang_choice.reason,
        "hint": f"Run: python {fname} (includes built-in tests)",
    }


def _generate_go_cli(name: str, brief: str) -> str:
    """Generate a simple Go CLI tool."""
    return f"""package main

import (
    "fmt"
    "os"
    "strings"
)

func main() {{
    args := os.Args[1:]

    if len(args) == 0 {{
        fmt.Println("Go CLI Tool: {name or 'aurora-cli'}")
        fmt.Println("Description: {brief or 'Generated by Aurora-X'}")
        fmt.Println()
        fmt.Println("Usage: go run cli.go [args...]")
        fmt.Println()
        fmt.Println("Pass some arguments to see them processed.")
        os.Exit(0)
    }}

    // Check for help
    for _, arg := range args {{
        if arg == "--help" || arg == "-h" {{
            fmt.Println("Help for {name or 'CLI tool'}")
            fmt.Println("Arguments:", strings.Join(args, " "))
            os.Exit(0)
        }}
    }}

    // Process arguments
    fmt.Printf("Processing %d argument(s):\\n", len(args))
    for i, arg := range args {{
        fmt.Printf("  %d. %s (length: %d)\\n", i+1, arg, len(arg))
    }}
}}
"""
