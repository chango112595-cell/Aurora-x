"""
Rust CLI template for memory-safe command-line tools.
Generates a complete Rust project with Cargo.toml and main.rs.
"""

RUST_MAIN = """use std::env;
use std::process;

fn main() {
    let args: Vec<String> = env::args().collect();

    // Skip the program name (first argument)
    let args = &args[1..];

    if args.is_empty() {
        println!("🦀 Aurora Rust CLI");
        println!("═══════════════════");
        println!();
        println!("Usage: {} [OPTIONS] <ARGS>", env!("CARGO_PKG_NAME"));
        println!();
        println!("This is a memory-safe CLI tool generated by Aurora-X.");
        println!("Pass some arguments to see them processed.");
        println!();
        println!("Examples:");
        println!("  {} hello world", env!("CARGO_PKG_NAME"));
        println!("  {} --verbose process data.txt", env!("CARGO_PKG_NAME"));
        process::exit(0);
    }

    // Check for help flag
    if args.iter().any(|arg| arg == "--help" || arg == "-h") {
        print_help();
        process::exit(0);
    }

    // Check for version flag
    if args.iter().any(|arg| arg == "--version" || arg == "-V") {
        println!("{} {}", env!("CARGO_PKG_NAME"), env!("CARGO_PKG_VERSION"));
        process::exit(0);
    }

    // Process arguments
    let verbose = args.iter().any(|arg| arg == "--verbose" || arg == "-v");

    if verbose {
        println!("🔍 Verbose mode enabled");
        println!("📝 Processing {} argument(s):", args.len());
    }

    // Filter out flags and process remaining arguments
    let data_args: Vec<&String> = args.iter()
        .filter(|arg| !arg.starts_with("--") && !arg.starts_with("-"))
        .collect();

    if data_args.is_empty() {
        eprintln!("❌ Error: No data arguments provided");
        eprintln!("   Use --help for usage information");
        process::exit(1);
    }

    // Process each argument
    println!("✨ Processing {} item(s):", data_args.len());
    println!("───────────────────────────");

    for (i, arg) in data_args.iter().enumerate() {
        let result = process_argument(arg);
        println!("{:2}. {} → {}", i + 1, arg, result);
    }

    println!("───────────────────────────");
    println!("✅ Processing complete");
}

fn print_help() {
    println!("Aurora Rust CLI - Memory-Safe Command Line Tool");
    println!();
    println!("USAGE:");
    println!("    {} [OPTIONS] <ARGS>", env!("CARGO_PKG_NAME"));
    println!();
    println!("OPTIONS:");
    println!("    -h, --help       Print this help message");
    println!("    -V, --version    Print version information");
    println!("    -v, --verbose    Enable verbose output");
    println!();
    println!("ARGS:");
    println!("    <ARGS>...        Arguments to process");
    println!();
    println!("EXAMPLES:");
    println!("    {} data.txt", env!("CARGO_PKG_NAME"));
    println!("    {} --verbose file1 file2 file3", env!("CARGO_PKG_NAME"));
}

fn process_argument(arg: &str) -> String {
    // Example processing: convert to uppercase and add length info
    format!("{} (len: {})", arg.to_uppercase(), arg.len())
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_process_argument() {
        assert_eq!(process_argument("hello"), "HELLO (len: 5)");
        assert_eq!(process_argument("rust"), "RUST (len: 4)");
    }
}
"""

CARGO_TOML = """[package]
name = "aurora_cli"
version = "0.1.0"
edition = "2021"
authors = ["Aurora-X"]
description = "Memory-safe CLI tool generated by Aurora-X"

[dependencies]
# Add dependencies as needed
# clap = { version = "4.0", features = ["derive"] }  # For advanced arg parsing
# anyhow = "1.0"  # For error handling
# colored = "2.0"  # For colored output

[[bin]]
name = "aurora_cli"
path = "src/main.rs"
"""

def render_rust_cli(name: str, brief: str = None) -> dict:
    """
    Generate a complete Rust CLI project.

    Returns:
        dict with 'files' (dict of filename: content) and 'hint' for running
    """
    # Clean the name for Rust package naming conventions
    clean_name = name.replace(" ", "_").replace("-", "_").lower()
    if clean_name and clean_name[0].isdigit():
        clean_name = "cli_" + clean_name

    # Update Cargo.toml with the actual name
    cargo = CARGO_TOML.replace("aurora_cli", clean_name)

    files = {
        "Cargo.toml": cargo,
        "src/main.rs": RUST_MAIN,
    }

    return {
        "files": files,
        "hint": "Run: cargo run -- hello world (or: cargo build --release for optimized binary)"
    }
