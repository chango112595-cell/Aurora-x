"""
C# WebAPI template for enterprise-grade web APIs.
Generates a complete .NET 8 Web API project.
"""

PROGRAM_CS = """using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

var builder = WebApplication.CreateBuilder(args);

// Add services
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(options =>
{
    options.SwaggerDoc("v1", new Microsoft.OpenApi.Models.OpenApiInfo
    {
        Title = "Aurora Web API",
        Version = "v1",
        Description = "Enterprise-grade Web API generated by Aurora-X"
    });
});

var app = builder.Build();

// Configure pipeline
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

// Health check endpoint
app.MapGet("/health", () => Results.Json(new
{
    ok = true,
    service = "Aurora Web API",
    version = "1.0.0",
    timestamp = DateTime.UtcNow
}))
.WithName("HealthCheck")
.WithOpenApi()
.Produces(200);

// Echo endpoint
app.MapPost("/echo", (EchoRequest request) => Results.Json(new EchoResponse
{
    Message = request.Message,
    Timestamp = DateTime.UtcNow,
    Service = "Aurora Web API",
    ProcessedAt = DateTime.UtcNow.ToString("o")
}))
.WithName("Echo")
.WithOpenApi()
.Produces<EchoResponse>(200)
.Produces(400);

// Info endpoint
app.MapGet("/", () => Results.Json(new
{
    service = "Aurora Web API",
    documentation = "/swagger",
    endpoints = new[]
    {
        "GET /health - Health check",
        "POST /echo - Echo service",
        "GET /api/items - List items",
        "GET /api/items/{id} - Get item by ID"
    }
}))
.WithName("Info")
.WithOpenApi();

// Sample API endpoints
app.MapGet("/api/items", () =>
{
    var items = new List<Item>
    {
        new Item { Id = 1, Name = "Item 1", Description = "First item", CreatedAt = DateTime.UtcNow.AddDays(-7) },
        new Item { Id = 2, Name = "Item 2", Description = "Second item", CreatedAt = DateTime.UtcNow.AddDays(-3) },
        new Item { Id = 3, Name = "Item 3", Description = "Third item", CreatedAt = DateTime.UtcNow.AddDays(-1) }
    };
    return Results.Json(items);
})
.WithName("GetItems")
.WithOpenApi()
.Produces<List<Item>>(200);

app.MapGet("/api/items/{id}", (int id) =>
{
    if (id < 1 || id > 3)
    {
        return Results.NotFound(new { error = $"Item with ID {id} not found" });
    }

    var item = new Item
    {
        Id = id,
        Name = $"Item {id}",
        Description = $"Description for item {id}",
        CreatedAt = DateTime.UtcNow.AddDays(-id)
    };

    return Results.Json(item);
})
.WithName("GetItemById")
.WithOpenApi()
.Produces<Item>(200)
.Produces(404);

// Run the application
var port = Environment.GetEnvironmentVariable("PORT") ?? "5080";
Console.WriteLine($"ðŸš€ Starting C# Web API on port {port}...");
app.Run($"http://0.0.0.0:{port}");

// Data models
public record EchoRequest(string Message);
public record EchoResponse
{
    public string Message { get; init; } = string.Empty;
    public DateTime Timestamp { get; init; }
    public string Service { get; init; } = string.Empty;
    public string ProcessedAt { get; init; } = string.Empty;
}

public class Item
{
    public int Id { get; set; }
    public string Name { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    public DateTime CreatedAt { get; set; }
}
"""

CS_PROJ = """<Project Sdk="Microsoft.NET.Sdk.Web">
  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <NoWarn>$(NoWarn);CS1591</NoWarn>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Swashbuckle.AspNetCore" Version="6.5.0" />
  </ItemGroup>
</Project>
"""

APPSETTINGS_JSON = """{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*"
}
"""

APPSETTINGS_DEV_JSON = """{
  "Logging": {
    "LogLevel": {
      "Default": "Debug",
      "Microsoft.AspNetCore": "Information"
    }
  }
}
"""


def render_csharp_webapi(name: str, brief: str = None) -> dict:
    """
    Generate a complete C# Web API project.

    Returns:
        dict with 'folder', 'files' (dict of filename: content) and 'hint' for running
    """
    # Clean the name for .NET project naming conventions
    clean_name = name.replace(" ", "").replace("-", "").replace("_", "")
    if clean_name and clean_name[0].isdigit():
        clean_name = "Aurora" + clean_name
    if not clean_name:
        clean_name = "AuroraWebApi"

    folder = f"{clean_name}.WebApi"

    files = {
        f"{folder}.csproj": CS_PROJ,
        "Program.cs": PROGRAM_CS,
        "appsettings.json": APPSETTINGS_JSON,
        "appsettings.Development.json": APPSETTINGS_DEV_JSON,
    }

    return {
        "folder": folder,
        "files": files,
        "hint": f"Run: cd {folder} && dotnet run (then visit http://localhost:5080/swagger)",
    }
