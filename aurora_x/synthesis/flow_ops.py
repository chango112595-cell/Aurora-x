from __future__ import annotations
from aurora_x.synthesis.fallback import generate_fallback_function

SAFE_HEADER = "# Generated by Aurora-X v3 (offline, safe)\n"

def impl_for(signature: str, description: str) -> str:
    sig = signature.strip()
    d = (description or "").lower()
    if "palindrome" in d:
        return SAFE_HEADER + sig + ":\n    \"\"\"Return True if s is a palindrome (unicode-safe).\"\"\"\n    s_norm = s\n    return s_norm == s_norm[::-1]\n"
    if "fibonacci" in d or "fib" in d:
        return SAFE_HEADER + sig + ":\n    \"\"\"Return n-th Fibonacci number using iterative O(n).\"\"\"\n    if n < 0: raise ValueError(\"n must be non-negative\")\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n"
    if "reverse" in d and "string" in d:
        return SAFE_HEADER + sig + ":\n    \"\"\"Reverse a unicode string.\"\"\"\n    return s[::-1]\n"
    if "factorial" in d:
        return SAFE_HEADER + sig + ":\n    \"\"\"Calculate the factorial of a non-negative integer.\"\"\"\n    if n < 0: raise ValueError(\"n must be non-negative\")\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\n"
    if "largest" in d or ("max" in d and "list" in d):
        return SAFE_HEADER + sig + ":\n    \"\"\"Return the largest number in a list.\"\"\"\n    if not nums: raise ValueError(\"List cannot be empty\")\n    return max(nums)\n"
    if "sum of squares" in d:
        return SAFE_HEADER + sig + ":\n    \"\"\"Compute the sum of squares of numbers in a list.\"\"\"\n    return sum(x * x for x in nums)\n"
    if ("add" in d or "sum" in d) and ("two" in d or "integers" in d):
        return SAFE_HEADER + sig + ":\n    \"\"\"Return the sum of two integers.\"\"\"\n    return a + b\n"
    if "prime" in d:
        return SAFE_HEADER + sig + ":\n    \"\"\"Check if a number is prime.\"\"\"\n    if n < 2: return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0: return False\n    return True\n"
    if "sort" in d and ("list" in d or "integers" in d):
        return SAFE_HEADER + sig + ":\n    \"\"\"Sort a list of integers in ascending order.\"\"\"\n    return sorted(nums)\n"
    if "count" in d and "vowel" in d:
        return SAFE_HEADER + sig + ":\n    \"\"\"Count the number of vowels in a string.\"\"\"\n    vowels = 'aeiouAEIOU'\n    return sum(1 for c in s if c in vowels)\n"
    if "gcd" in d or "greatest common divisor" in d:
        return SAFE_HEADER + sig + ":\n    \"\"\"Find the greatest common divisor of two numbers.\"\"\"\n    while b:\n        a, b = b, a % b\n    return abs(a)\n"
    # Use generic fallback when no template matches
    fallback_impl = generate_fallback_function(sig, description or "Generic placeholder - no specific template matched")
    # Remove the first line (header comment) from fallback as we add our own header
    fallback_lines = fallback_impl.split('\n')[1:]  # Skip the "# Generated by..." line
    return SAFE_HEADER + '\n'.join(fallback_lines)